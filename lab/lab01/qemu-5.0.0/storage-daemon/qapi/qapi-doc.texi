@c AUTOMATICALLY GENERATED, DO NOT MODIFY

@subsection Block core (VM unrelated)

@section Common data types


@deftp {Enum} IoOperationType

An enumeration of the I/O operation types

@b{Values:}
@table @asis
@item @code{read}
read operation
@item @code{write}
write operation
@end table

@b{Since:}
2.1

@end deftp



@deftp {Enum} OnOffAuto

An enumeration of three options: on, off, and auto

@b{Values:}
@table @asis
@item @code{auto}
QEMU selects the value between on and off
@item @code{on}
Enabled
@item @code{off}
Disabled
@end table

@b{Since:}
2.2

@end deftp



@deftp {Enum} OnOffSplit

An enumeration of three values: on, off, and split

@b{Values:}
@table @asis
@item @code{on}
Enabled
@item @code{off}
Disabled
@item @code{split}
Mixed
@end table

@b{Since:}
2.6

@end deftp



@deftp {Object} String

A fat type wrapping 'str', to be embedded in lists.

@b{Members:}
@table @asis
@item @code{str: string}
Not documented
@end table

@b{Since:}
1.2

@end deftp



@deftp {Alternate} StrOrNull

This is a string value or the explicit lack of a string (null
pointer in C).  Intended for cases when 'optional absent' already
has a different meaning.

@b{Members:}
@table @asis
@item @code{s: string}
the string value
@item @code{n: null}
no string value
@end table

@b{Since:}
2.10

@end deftp



@deftp {Enum} OffAutoPCIBAR

An enumeration of options for specifying a PCI BAR

@b{Values:}
@table @asis
@item @code{off}
The specified feature is disabled
@item @code{auto}
The PCI BAR for the feature is automatically selected
@item @code{bar0}
PCI BAR0 is used for the feature
@item @code{bar1}
PCI BAR1 is used for the feature
@item @code{bar2}
PCI BAR2 is used for the feature
@item @code{bar3}
PCI BAR3 is used for the feature
@item @code{bar4}
PCI BAR4 is used for the feature
@item @code{bar5}
PCI BAR5 is used for the feature
@end table

@b{Since:}
2.12

@end deftp



@deftp {Enum} PCIELinkSpeed

An enumeration of PCIe link speeds in units of GT/s

@b{Values:}
@table @asis
@item @code{2_5}
2.5GT/s
@item @code{5}
5.0GT/s
@item @code{8}
8.0GT/s
@item @code{16}
16.0GT/s
@end table

@b{Since:}
4.0

@end deftp



@deftp {Enum} PCIELinkWidth

An enumeration of PCIe link width

@b{Values:}
@table @asis
@item @code{1}
x1
@item @code{2}
x2
@item @code{4}
x4
@item @code{8}
x8
@item @code{12}
x12
@item @code{16}
x16
@item @code{32}
x32
@end table

@b{Since:}
4.0

@end deftp


@section Cryptography


@deftp {Enum} QCryptoTLSCredsEndpoint

The type of network endpoint that will be using the credentials.
Most types of credential require different setup / structures
depending on whether they will be used in a server versus a
client.

@b{Values:}
@table @asis
@item @code{client}
the network endpoint is acting as the client
@item @code{server}
the network endpoint is acting as the server
@end table

@b{Since:}
2.5

@end deftp



@deftp {Enum} QCryptoSecretFormat

The data format that the secret is provided in

@b{Values:}
@table @asis
@item @code{raw}
raw bytes. When encoded in JSON only valid UTF-8 sequences can be used
@item @code{base64}
arbitrary base64 encoded binary data
@end table

@b{Since:}
2.6

@end deftp



@deftp {Enum} QCryptoHashAlgorithm

The supported algorithms for computing content digests

@b{Values:}
@table @asis
@item @code{md5}
MD5. Should not be used in any new code, legacy compat only
@item @code{sha1}
SHA-1. Should not be used in any new code, legacy compat only
@item @code{sha224}
SHA-224. (since 2.7)
@item @code{sha256}
SHA-256. Current recommended strong hash.
@item @code{sha384}
SHA-384. (since 2.7)
@item @code{sha512}
SHA-512. (since 2.7)
@item @code{ripemd160}
RIPEMD-160. (since 2.7)
@end table

@b{Since:}
2.6

@end deftp



@deftp {Enum} QCryptoCipherAlgorithm

The supported algorithms for content encryption ciphers

@b{Values:}
@table @asis
@item @code{aes-128}
AES with 128 bit / 16 byte keys
@item @code{aes-192}
AES with 192 bit / 24 byte keys
@item @code{aes-256}
AES with 256 bit / 32 byte keys
@item @code{des-rfb}
RFB specific variant of single DES. Do not use except in VNC.
@item @code{3des}
3DES(EDE) with 192 bit / 24 byte keys (since 2.9)
@item @code{cast5-128}
Cast5 with 128 bit / 16 byte keys
@item @code{serpent-128}
Serpent with 128 bit / 16 byte keys
@item @code{serpent-192}
Serpent with 192 bit / 24 byte keys
@item @code{serpent-256}
Serpent with 256 bit / 32 byte keys
@item @code{twofish-128}
Twofish with 128 bit / 16 byte keys
@item @code{twofish-192}
Twofish with 192 bit / 24 byte keys
@item @code{twofish-256}
Twofish with 256 bit / 32 byte keys
@end table

@b{Since:}
2.6

@end deftp



@deftp {Enum} QCryptoCipherMode

The supported modes for content encryption ciphers

@b{Values:}
@table @asis
@item @code{ecb}
Electronic Code Book
@item @code{cbc}
Cipher Block Chaining
@item @code{xts}
XEX with tweaked code book and ciphertext stealing
@item @code{ctr}
Counter (Since 2.8)
@end table

@b{Since:}
2.6

@end deftp



@deftp {Enum} QCryptoIVGenAlgorithm

The supported algorithms for generating initialization
vectors for full disk encryption. The 'plain' generator
should not be used for disks with sector numbers larger
than 2^32, except where compatibility with pre-existing
Linux dm-crypt volumes is required.

@b{Values:}
@table @asis
@item @code{plain}
64-bit sector number truncated to 32-bits
@item @code{plain64}
64-bit sector number
@item @code{essiv}
64-bit sector number encrypted with a hash of the encryption key
@end table

@b{Since:}
2.6

@end deftp



@deftp {Enum} QCryptoBlockFormat

The supported full disk encryption formats

@b{Values:}
@table @asis
@item @code{qcow}
QCow/QCow2 built-in AES-CBC encryption. Use only
for liberating data from old images.
@item @code{luks}
LUKS encryption format. Recommended for new images
@end table

@b{Since:}
2.6

@end deftp



@deftp {Object} QCryptoBlockOptionsBase

The common options that apply to all full disk
encryption formats

@b{Members:}
@table @asis
@item @code{format: QCryptoBlockFormat}
the encryption format
@end table

@b{Since:}
2.6

@end deftp



@deftp {Object} QCryptoBlockOptionsQCow

The options that apply to QCow/QCow2 AES-CBC encryption format

@b{Members:}
@table @asis
@item @code{key-secret: string} (optional)
the ID of a QCryptoSecret object providing the
decryption key. Mandatory except when probing image for
metadata only.
@end table

@b{Since:}
2.6

@end deftp



@deftp {Object} QCryptoBlockOptionsLUKS

The options that apply to LUKS encryption format

@b{Members:}
@table @asis
@item @code{key-secret: string} (optional)
the ID of a QCryptoSecret object providing the
decryption key. Mandatory except when probing image for
metadata only.
@end table

@b{Since:}
2.6

@end deftp



@deftp {Object} QCryptoBlockCreateOptionsLUKS

The options that apply to LUKS encryption format initialization

@b{Members:}
@table @asis
@item @code{cipher-alg: QCryptoCipherAlgorithm} (optional)
the cipher algorithm for data encryption
Currently defaults to 'aes-256'.
@item @code{cipher-mode: QCryptoCipherMode} (optional)
the cipher mode for data encryption
Currently defaults to 'xts'
@item @code{ivgen-alg: QCryptoIVGenAlgorithm} (optional)
the initialization vector generator
Currently defaults to 'plain64'
@item @code{ivgen-hash-alg: QCryptoHashAlgorithm} (optional)
the initialization vector generator hash
Currently defaults to 'sha256'
@item @code{hash-alg: QCryptoHashAlgorithm} (optional)
the master key hash algorithm
Currently defaults to 'sha256'
@item @code{iter-time: int} (optional)
number of milliseconds to spend in
PBKDF passphrase processing. Currently defaults
to 2000. (since 2.8)
@item The members of @code{QCryptoBlockOptionsLUKS}
@end table

@b{Since:}
2.6

@end deftp



@deftp {Object} QCryptoBlockOpenOptions

The options that are available for all encryption formats
when opening an existing volume

@b{Members:}
@table @asis
@item The members of @code{QCryptoBlockOptionsBase}
@item The members of @code{QCryptoBlockOptionsQCow} when @code{format} is @t{"qcow"}
@item The members of @code{QCryptoBlockOptionsLUKS} when @code{format} is @t{"luks"}
@end table

@b{Since:}
2.6

@end deftp



@deftp {Object} QCryptoBlockCreateOptions

The options that are available for all encryption formats
when initializing a new volume

@b{Members:}
@table @asis
@item The members of @code{QCryptoBlockOptionsBase}
@item The members of @code{QCryptoBlockOptionsQCow} when @code{format} is @t{"qcow"}
@item The members of @code{QCryptoBlockCreateOptionsLUKS} when @code{format} is @t{"luks"}
@end table

@b{Since:}
2.6

@end deftp



@deftp {Object} QCryptoBlockInfoBase

The common information that applies to all full disk
encryption formats

@b{Members:}
@table @asis
@item @code{format: QCryptoBlockFormat}
the encryption format
@end table

@b{Since:}
2.7

@end deftp



@deftp {Object} QCryptoBlockInfoLUKSSlot

Information about the LUKS block encryption key
slot options

@b{Members:}
@table @asis
@item @code{active: boolean}
whether the key slot is currently in use
@item @code{key-offset: int}
offset to the key material in bytes
@item @code{iters: int} (optional)
number of PBKDF2 iterations for key material
@item @code{stripes: int} (optional)
number of stripes for splitting key material
@end table

@b{Since:}
2.7

@end deftp



@deftp {Object} QCryptoBlockInfoLUKS

Information about the LUKS block encryption options

@b{Members:}
@table @asis
@item @code{cipher-alg: QCryptoCipherAlgorithm}
the cipher algorithm for data encryption
@item @code{cipher-mode: QCryptoCipherMode}
the cipher mode for data encryption
@item @code{ivgen-alg: QCryptoIVGenAlgorithm}
the initialization vector generator
@item @code{ivgen-hash-alg: QCryptoHashAlgorithm} (optional)
the initialization vector generator hash
@item @code{hash-alg: QCryptoHashAlgorithm}
the master key hash algorithm
@item @code{payload-offset: int}
offset to the payload data in bytes
@item @code{master-key-iters: int}
number of PBKDF2 iterations for key material
@item @code{uuid: string}
unique identifier for the volume
@item @code{slots: array of QCryptoBlockInfoLUKSSlot}
information about each key slot
@end table

@b{Since:}
2.7

@end deftp



@deftp {Object} QCryptoBlockInfo

Information about the block encryption options

@b{Members:}
@table @asis
@item The members of @code{QCryptoBlockInfoBase}
@item The members of @code{QCryptoBlockInfoLUKS} when @code{format} is @t{"luks"}
@end table

@b{Since:}
2.7

@end deftp


@subsection Background jobs


@deftp {Enum} JobType

Type of a background job.

@b{Values:}
@table @asis
@item @code{commit}
block commit job type, see "block-commit"
@item @code{stream}
block stream job type, see "block-stream"
@item @code{mirror}
drive mirror job type, see "drive-mirror"
@item @code{backup}
drive backup job type, see "drive-backup"
@item @code{create}
image creation job type, see "blockdev-create" (since 3.0)
@end table

@b{Since:}
1.7

@end deftp



@deftp {Enum} JobStatus

Indicates the present state of a given job in its lifetime.

@b{Values:}
@table @asis
@item @code{undefined}
Erroneous, default state. Should not ever be visible.
@item @code{created}
The job has been created, but not yet started.
@item @code{running}
The job is currently running.
@item @code{paused}
The job is running, but paused. The pause may be requested by
either the QMP user or by internal processes.
@item @code{ready}
The job is running, but is ready for the user to signal completion.
This is used for long-running jobs like mirror that are designed to
run indefinitely.
@item @code{standby}
The job is ready, but paused. This is nearly identical to @code{paused}.
The job may return to @code{ready} or otherwise be canceled.
@item @code{waiting}
The job is waiting for other jobs in the transaction to converge
to the waiting state. This status will likely not be visible for
the last job in a transaction.
@item @code{pending}
The job has finished its work, but has finalization steps that it
needs to make prior to completing. These changes will require
manual intervention via @code{job-finalize} if auto-finalize was set to
false. These pending changes may still fail.
@item @code{aborting}
The job is in the process of being aborted, and will finish with
an error. The job will afterwards report that it is @code{concluded}.
This status may not be visible to the management process.
@item @code{concluded}
The job has finished all work. If auto-dismiss was set to false,
the job will remain in the query list until it is dismissed via
@code{job-dismiss}.
@item @code{null}
The job is in the process of being dismantled. This state should not
ever be visible externally.
@end table

@b{Since:}
2.12

@end deftp



@deftp {Enum} JobVerb

Represents command verbs that can be applied to a job.

@b{Values:}
@table @asis
@item @code{cancel}
see @code{job-cancel}
@item @code{pause}
see @code{job-pause}
@item @code{resume}
see @code{job-resume}
@item @code{set-speed}
see @code{block-job-set-speed}
@item @code{complete}
see @code{job-complete}
@item @code{dismiss}
see @code{job-dismiss}
@item @code{finalize}
see @code{job-finalize}
@end table

@b{Since:}
2.12

@end deftp



@deftypefn Event {} JOB_STATUS_CHANGE

Emitted when a job transitions to a different status.

@b{Arguments:}
@table @asis
@item @code{id: string}
The job identifier
@item @code{status: JobStatus}
The new job status
@end table

@b{Since:}
3.0

@end deftypefn



@deftypefn Command {} job-pause

Pause an active job.

This command returns immediately after marking the active job for pausing.
Pausing an already paused job is an error.

The job will pause as soon as possible, which means transitioning into the
PAUSED state if it was RUNNING, or into STANDBY if it was READY. The
corresponding JOB_STATUS_CHANGE event will be emitted.

Cancelling a paused job automatically resumes it.

@b{Arguments:}
@table @asis
@item @code{id: string}
The job identifier.
@end table

@b{Since:}
3.0

@end deftypefn



@deftypefn Command {} job-resume

Resume a paused job.

This command returns immediately after resuming a paused job. Resuming an
already running job is an error.

@code{id} : The job identifier.

@b{Arguments:}
@table @asis
@item @code{id: string}
Not documented
@end table

@b{Since:}
3.0

@end deftypefn



@deftypefn Command {} job-cancel

Instruct an active background job to cancel at the next opportunity.
This command returns immediately after marking the active job for
cancellation.

The job will cancel as soon as possible and then emit a JOB_STATUS_CHANGE
event. Usually, the status will change to ABORTING, but it is possible that
a job successfully completes (e.g. because it was almost done and there was
no opportunity to cancel earlier than completing the job) and transitions to
PENDING instead.

@b{Arguments:}
@table @asis
@item @code{id: string}
The job identifier.
@end table

@b{Since:}
3.0

@end deftypefn



@deftypefn Command {} job-complete

Manually trigger completion of an active job in the READY state.

@b{Arguments:}
@table @asis
@item @code{id: string}
The job identifier.
@end table

@b{Since:}
3.0

@end deftypefn



@deftypefn Command {} job-dismiss

Deletes a job that is in the CONCLUDED state. This command only needs to be
run explicitly for jobs that don't have automatic dismiss enabled.

This command will refuse to operate on any job that has not yet reached its
terminal state, JOB_STATUS_CONCLUDED. For jobs that make use of JOB_READY
event, job-cancel or job-complete will still need to be used as appropriate.

@b{Arguments:}
@table @asis
@item @code{id: string}
The job identifier.
@end table

@b{Since:}
3.0

@end deftypefn



@deftypefn Command {} job-finalize

Instructs all jobs in a transaction (or a single job if it is not part of any
transaction) to finalize any graph changes and do any necessary cleanup. This
command requires that all involved jobs are in the PENDING state.

For jobs in a transaction, instructing one job to finalize will force
ALL jobs in the transaction to finalize, so it is only necessary to instruct
a single member job to finalize.

@b{Arguments:}
@table @asis
@item @code{id: string}
The identifier of any job in the transaction, or of a job that is not
part of any transaction.
@end table

@b{Since:}
3.0

@end deftypefn



@deftp {Object} JobInfo

Information about a job.

@b{Members:}
@table @asis
@item @code{id: string}
The job identifier
@item @code{type: JobType}
The kind of job that is being performed
@item @code{status: JobStatus}
Current job state/status
@item @code{current-progress: int}
Progress made until now. The unit is arbitrary and the
value can only meaningfully be used for the ratio of
@code{current-progress} to @code{total-progress}. The value is
monotonically increasing.
@item @code{total-progress: int}
Estimated @code{current-progress} value at the completion of
the job. This value can arbitrarily change while the
job is running, in both directions.
@item @code{error: string} (optional)
If this field is present, the job failed; if it is
still missing in the CONCLUDED state, this indicates
successful completion.

The value is a human-readable error message to describe
the reason for the job failure. It should not be parsed
by applications.
@end table

@b{Since:}
3.0

@end deftp



@deftypefn Command {} query-jobs

Return information about jobs.

@b{Returns:}
a list with a @code{JobInfo} for each active job

@b{Since:}
3.0

@end deftypefn


@section Socket data types


@deftp {Enum} NetworkAddressFamily

The network address family

@b{Values:}
@table @asis
@item @code{ipv4}
IPV4 family
@item @code{ipv6}
IPV6 family
@item @code{unix}
unix socket
@item @code{vsock}
vsock family (since 2.8)
@item @code{unknown}
otherwise
@end table

@b{Since:}
2.1

@end deftp



@deftp {Object} InetSocketAddressBase



@b{Members:}
@table @asis
@item @code{host: string}
host part of the address
@item @code{port: string}
port part of the address
@end table

@end deftp



@deftp {Object} InetSocketAddress

Captures a socket address or address range in the Internet namespace.

@b{Members:}
@table @asis
@item @code{numeric: boolean} (optional)
true if the host/port are guaranteed to be numeric,
false if name resolution should be attempted. Defaults to false.
(Since 2.9)
@item @code{to: int} (optional)
If present, this is range of possible addresses, with port
between @code{port} and @code{to}.
@item @code{ipv4: boolean} (optional)
whether to accept IPv4 addresses, default try both IPv4 and IPv6
@item @code{ipv6: boolean} (optional)
whether to accept IPv6 addresses, default try both IPv4 and IPv6
@item @code{keep-alive: boolean} (optional)
enable keep-alive when connecting to this socket. Not supported
for passive sockets. (Since 4.2)
@item The members of @code{InetSocketAddressBase}
@end table

@b{Since:}
1.3

@end deftp



@deftp {Object} UnixSocketAddress

Captures a socket address in the local ("Unix socket") namespace.

@b{Members:}
@table @asis
@item @code{path: string}
filesystem path to use
@end table

@b{Since:}
1.3

@end deftp



@deftp {Object} VsockSocketAddress

Captures a socket address in the vsock namespace.

@b{Members:}
@table @asis
@item @code{cid: string}
unique host identifier
@item @code{port: string}
port
@end table

@b{Note:}
string types are used to allow for possible future hostname or
service resolution support.

@b{Since:}
2.8

@end deftp



@deftp {Object} SocketAddressLegacy

Captures the address of a socket, which could also be a named file descriptor

@b{Members:}
@table @asis
@item @code{type}
One of @t{"inet"}, @t{"unix"}, @t{"vsock"}, @t{"fd"}
@item @code{data: InetSocketAddress} when @code{type} is @t{"inet"}
@item @code{data: UnixSocketAddress} when @code{type} is @t{"unix"}
@item @code{data: VsockSocketAddress} when @code{type} is @t{"vsock"}
@item @code{data: String} when @code{type} is @t{"fd"}
@end table

@b{Note:}
This type is deprecated in favor of SocketAddress.  The
difference between SocketAddressLegacy and SocketAddress is that the
latter is a flat union rather than a simple union. Flat is nicer
because it avoids nesting on the wire, i.e. that form has fewer @{@}.

@b{Since:}
1.3

@end deftp



@deftp {Enum} SocketAddressType

Available SocketAddress types

@b{Values:}
@table @asis
@item @code{inet}
Internet address
@item @code{unix}
Unix domain socket
@item @code{vsock}
VMCI address
@item @code{fd}
decimal is for file descriptor number, otherwise a file descriptor name.
Named file descriptors are permitted in monitor commands, in combination
with the 'getfd' command. Decimal file descriptors are permitted at
startup or other contexts where no monitor context is active.
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} SocketAddress

Captures the address of a socket, which could also be a named file
descriptor

@b{Members:}
@table @asis
@item @code{type: SocketAddressType}
Transport type
@item The members of @code{InetSocketAddress} when @code{type} is @t{"inet"}
@item The members of @code{UnixSocketAddress} when @code{type} is @t{"unix"}
@item The members of @code{VsockSocketAddress} when @code{type} is @t{"vsock"}
@item The members of @code{String} when @code{type} is @t{"fd"}
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} SnapshotInfo



@b{Members:}
@table @asis
@item @code{id: string}
unique snapshot id
@item @code{name: string}
user chosen name
@item @code{vm-state-size: int}
size of the VM state
@item @code{date-sec: int}
UTC date of the snapshot in seconds
@item @code{date-nsec: int}
fractional part in nano seconds to be used with date-sec
@item @code{vm-clock-sec: int}
VM clock relative to boot in seconds
@item @code{vm-clock-nsec: int}
fractional part in nano seconds to be used with vm-clock-sec
@end table

@b{Since:}
1.3

@end deftp



@deftp {Object} ImageInfoSpecificQCow2EncryptionBase



@b{Members:}
@table @asis
@item @code{format: BlockdevQcow2EncryptionFormat}
The encryption format
@end table

@b{Since:}
2.10

@end deftp



@deftp {Object} ImageInfoSpecificQCow2Encryption



@b{Members:}
@table @asis
@item The members of @code{ImageInfoSpecificQCow2EncryptionBase}
@item The members of @code{QCryptoBlockInfoLUKS} when @code{format} is @t{"luks"}
@end table

@b{Since:}
2.10

@end deftp



@deftp {Object} ImageInfoSpecificQCow2



@b{Members:}
@table @asis
@item @code{compat: string}
compatibility level
@item @code{data-file: string} (optional)
the filename of the external data file that is stored in the
image and used as a default for opening the image (since: 4.0)
@item @code{data-file-raw: boolean} (optional)
True if the external data file must stay valid as a
standalone (read-only) raw image without looking at qcow2
metadata (since: 4.0)
@item @code{lazy-refcounts: boolean} (optional)
on or off; only valid for compat >= 1.1
@item @code{corrupt: boolean} (optional)
true if the image has been marked corrupt; only valid for
compat >= 1.1 (since 2.2)
@item @code{refcount-bits: int}
width of a refcount entry in bits (since 2.3)
@item @code{encrypt: ImageInfoSpecificQCow2Encryption} (optional)
details about encryption parameters; only set if image
is encrypted (since 2.10)
@item @code{bitmaps: array of Qcow2BitmapInfo} (optional)
A list of qcow2 bitmap details (since 4.0)
@end table

@b{Since:}
1.7

@end deftp



@deftp {Object} ImageInfoSpecificVmdk



@b{Members:}
@table @asis
@item @code{create-type: string}
The create type of VMDK image
@item @code{cid: int}
Content id of image
@item @code{parent-cid: int}
Parent VMDK image's cid
@item @code{extents: array of ImageInfo}
List of extent files
@end table

@b{Since:}
1.7

@end deftp



@deftp {Object} ImageInfoSpecific

A discriminated record of image format specific information structures.

@b{Members:}
@table @asis
@item @code{type}
One of @t{"qcow2"}, @t{"vmdk"}, @t{"luks"}
@item @code{data: ImageInfoSpecificQCow2} when @code{type} is @t{"qcow2"}
@item @code{data: ImageInfoSpecificVmdk} when @code{type} is @t{"vmdk"}
@item @code{data: QCryptoBlockInfoLUKS} when @code{type} is @t{"luks"}
@end table

@b{Since:}
1.7

@end deftp



@deftp {Object} ImageInfo

Information about a QEMU image file

@b{Members:}
@table @asis
@item @code{filename: string}
name of the image file
@item @code{format: string}
format of the image file
@item @code{virtual-size: int}
maximum capacity in bytes of the image
@item @code{actual-size: int} (optional)
actual size on disk in bytes of the image
@item @code{dirty-flag: boolean} (optional)
true if image is not cleanly closed
@item @code{cluster-size: int} (optional)
size of a cluster in bytes
@item @code{encrypted: boolean} (optional)
true if the image is encrypted
@item @code{compressed: boolean} (optional)
true if the image is compressed (Since 1.7)
@item @code{backing-filename: string} (optional)
name of the backing file
@item @code{full-backing-filename: string} (optional)
full path of the backing file
@item @code{backing-filename-format: string} (optional)
the format of the backing file
@item @code{snapshots: array of SnapshotInfo} (optional)
list of VM snapshots
@item @code{backing-image: ImageInfo} (optional)
info of the backing image (since 1.6)
@item @code{format-specific: ImageInfoSpecific} (optional)
structure supplying additional format-specific
information (since 1.7)
@end table

@b{Since:}
1.3

@end deftp



@deftp {Object} ImageCheck

Information about a QEMU image file check

@b{Members:}
@table @asis
@item @code{filename: string}
name of the image file checked
@item @code{format: string}
format of the image file checked
@item @code{check-errors: int}
number of unexpected errors occurred during check
@item @code{image-end-offset: int} (optional)
offset (in bytes) where the image ends, this
field is present if the driver for the image format
supports it
@item @code{corruptions: int} (optional)
number of corruptions found during the check if any
@item @code{leaks: int} (optional)
number of leaks found during the check if any
@item @code{corruptions-fixed: int} (optional)
number of corruptions fixed during the check
if any
@item @code{leaks-fixed: int} (optional)
number of leaks fixed during the check if any
@item @code{total-clusters: int} (optional)
total number of clusters, this field is present
if the driver for the image format supports it
@item @code{allocated-clusters: int} (optional)
total number of allocated clusters, this
field is present if the driver for the image format
supports it
@item @code{fragmented-clusters: int} (optional)
total number of fragmented clusters, this
field is present if the driver for the image format
supports it
@item @code{compressed-clusters: int} (optional)
total number of compressed clusters, this
field is present if the driver for the image format
supports it
@end table

@b{Since:}
1.4

@end deftp



@deftp {Object} MapEntry

Mapping information from a virtual block range to a host file range

@b{Members:}
@table @asis
@item @code{start: int}
the start byte of the mapped virtual range
@item @code{length: int}
the number of bytes of the mapped virtual range
@item @code{data: boolean}
whether the mapped range has data
@item @code{zero: boolean}
whether the virtual blocks are zeroed
@item @code{depth: int}
the depth of the mapping
@item @code{offset: int} (optional)
the offset in file that the virtual sectors are mapped to
@item @code{filename: string} (optional)
filename that is referred to by @code{offset}
@end table

@b{Since:}
2.6

@end deftp



@deftp {Object} BlockdevCacheInfo

Cache mode information for a block device

@b{Members:}
@table @asis
@item @code{writeback: boolean}
true if writeback mode is enabled
@item @code{direct: boolean}
true if the host page cache is bypassed (O_DIRECT)
@item @code{no-flush: boolean}
true if flush requests are ignored for the device
@end table

@b{Since:}
2.3

@end deftp



@deftp {Object} BlockDeviceInfo

Information about the backing device for a block device.

@b{Members:}
@table @asis
@item @code{file: string}
the filename of the backing device
@item @code{node-name: string} (optional)
the name of the block driver node (Since 2.0)
@item @code{ro: boolean}
true if the backing device was open read-only
@item @code{drv: string}
the name of the block format used to open the backing device. As of
0.14.0 this can be: 'blkdebug', 'bochs', 'cloop', 'cow', 'dmg',
'file', 'file', 'ftp', 'ftps', 'host_cdrom', 'host_device',
'http', 'https', 'luks', 'nbd', 'parallels', 'qcow',
'qcow2', 'raw', 'vdi', 'vmdk', 'vpc', 'vvfat'
2.2: 'archipelago' added, 'cow' dropped
2.3: 'host_floppy' deprecated
2.5: 'host_floppy' dropped
2.6: 'luks' added
2.8: 'replication' added, 'tftp' dropped
2.9: 'archipelago' dropped
@item @code{backing_file: string} (optional)
the name of the backing file (for copy-on-write)
@item @code{backing_file_depth: int}
number of files in the backing file chain (since: 1.2)
@item @code{encrypted: boolean}
true if the backing device is encrypted
@item @code{encryption_key_missing: boolean}
always false
@item @code{detect_zeroes: BlockdevDetectZeroesOptions}
detect and optimize zero writes (Since 2.1)
@item @code{bps: int}
total throughput limit in bytes per second is specified
@item @code{bps_rd: int}
read throughput limit in bytes per second is specified
@item @code{bps_wr: int}
write throughput limit in bytes per second is specified
@item @code{iops: int}
total I/O operations per second is specified
@item @code{iops_rd: int}
read I/O operations per second is specified
@item @code{iops_wr: int}
write I/O operations per second is specified
@item @code{image: ImageInfo}
the info of image used (since: 1.6)
@item @code{bps_max: int} (optional)
total throughput limit during bursts,
in bytes (Since 1.7)
@item @code{bps_rd_max: int} (optional)
read throughput limit during bursts,
in bytes (Since 1.7)
@item @code{bps_wr_max: int} (optional)
write throughput limit during bursts,
in bytes (Since 1.7)
@item @code{iops_max: int} (optional)
total I/O operations per second during bursts,
in bytes (Since 1.7)
@item @code{iops_rd_max: int} (optional)
read I/O operations per second during bursts,
in bytes (Since 1.7)
@item @code{iops_wr_max: int} (optional)
write I/O operations per second during bursts,
in bytes (Since 1.7)
@item @code{bps_max_length: int} (optional)
maximum length of the @code{bps_max} burst
period, in seconds. (Since 2.6)
@item @code{bps_rd_max_length: int} (optional)
maximum length of the @code{bps_rd_max}
burst period, in seconds. (Since 2.6)
@item @code{bps_wr_max_length: int} (optional)
maximum length of the @code{bps_wr_max}
burst period, in seconds. (Since 2.6)
@item @code{iops_max_length: int} (optional)
maximum length of the @code{iops} burst
period, in seconds. (Since 2.6)
@item @code{iops_rd_max_length: int} (optional)
maximum length of the @code{iops_rd_max}
burst period, in seconds. (Since 2.6)
@item @code{iops_wr_max_length: int} (optional)
maximum length of the @code{iops_wr_max}
burst period, in seconds. (Since 2.6)
@item @code{iops_size: int} (optional)
an I/O size in bytes (Since 1.7)
@item @code{group: string} (optional)
throttle group name (Since 2.4)
@item @code{cache: BlockdevCacheInfo}
the cache mode used for the block device (since: 2.3)
@item @code{write_threshold: int}
configured write threshold for the device.
0 if disabled. (Since 2.3)
@item @code{dirty-bitmaps: array of BlockDirtyInfo} (optional)
dirty bitmaps information (only present if node
has one or more dirty bitmaps) (Since 4.2)
@end table

@b{Features:}
@table @asis
@item @code{deprecated}
Member @code{encryption_key_missing} is deprecated.  It is
always false.
@end table

@b{Since:}
0.14.0

@end deftp



@deftp {Enum} BlockDeviceIoStatus

An enumeration of block device I/O status.

@b{Values:}
@table @asis
@item @code{ok}
The last I/O operation has succeeded
@item @code{failed}
The last I/O operation has failed
@item @code{nospace}
The last I/O operation has failed due to a no-space condition
@end table

@b{Since:}
1.0

@end deftp



@deftp {Object} BlockDeviceMapEntry

Entry in the metadata map of the device (returned by "qemu-img map")

@b{Members:}
@table @asis
@item @code{start: int}
Offset in the image of the first byte described by this entry
(in bytes)
@item @code{length: int}
Length of the range described by this entry (in bytes)
@item @code{depth: int}
Number of layers (0 = top image, 1 = top image's backing file, etc.)
before reaching one for which the range is allocated.  The value is
in the range 0 to the depth of the image chain - 1.
@item @code{zero: boolean}
the sectors in this range read as zeros
@item @code{data: boolean}
reading the image will actually read data from a file (in particular,
if @code{offset} is present this means that the sectors are not simply
preallocated, but contain actual data in raw format)
@item @code{offset: int} (optional)
if present, the image file stores the data for this range in
raw format at the given offset.
@end table

@b{Since:}
1.7

@end deftp



@deftp {Enum} DirtyBitmapStatus

An enumeration of possible states that a dirty bitmap can report to the user.

@b{Values:}
@table @asis
@item @code{frozen}
The bitmap is currently in-use by some operation and is immutable.
If the bitmap was @code{active} prior to the operation, new writes by the
guest are being recorded in a temporary buffer, and will not be lost.
Generally, bitmaps are cleared on successful use in an operation and
the temporary buffer is committed into the bitmap. On failure, the
temporary buffer is merged back into the bitmap without first
clearing it.
Please refer to the documentation for each bitmap-using operation,
See also @code{blockdev-backup}, @code{drive-backup}.
@item @code{disabled}
The bitmap is not currently recording new writes by the guest.
This is requested explicitly via @code{block-dirty-bitmap-disable}.
It can still be cleared, deleted, or used for backup operations.
@item @code{active}
The bitmap is actively monitoring for new writes, and can be cleared,
deleted, or used for backup operations.
@item @code{locked}
The bitmap is currently in-use by some operation and is immutable.
If the bitmap was @code{active} prior to the operation, it is still
recording new writes. If the bitmap was @code{disabled}, it is not
recording new writes. (Since 2.12)
@item @code{inconsistent}
This is a persistent dirty bitmap that was marked in-use on
disk, and is unusable by QEMU. It can only be deleted.
Please rely on the inconsistent field in @code{BlockDirtyInfo}
instead, as the status field is deprecated. (Since 4.0)
@end table

@b{Since:}
2.4

@end deftp



@deftp {Object} BlockDirtyInfo

Block dirty bitmap information.

@b{Members:}
@table @asis
@item @code{name: string} (optional)
the name of the dirty bitmap (Since 2.4)
@item @code{count: int}
number of dirty bytes according to the dirty bitmap
@item @code{granularity: int}
granularity of the dirty bitmap in bytes (since 1.4)
@item @code{status: DirtyBitmapStatus}
current status of the dirty bitmap (since 2.4)
@item @code{recording: boolean}
true if the bitmap is recording new writes from the guest.
Replaces `active` and `disabled` statuses. (since 4.0)
@item @code{busy: boolean}
true if the bitmap is in-use by some operation (NBD or jobs)
and cannot be modified via QMP or used by another operation.
Replaces `locked` and `frozen` statuses. (since 4.0)
@item @code{persistent: boolean}
true if the bitmap was stored on disk, is scheduled to be stored
on disk, or both. (since 4.0)
@item @code{inconsistent: boolean} (optional)
true if this is a persistent bitmap that was improperly
stored. Implies @code{persistent} to be true; @code{recording} and
@code{busy} to be false. This bitmap cannot be used. To remove
it, use @code{block-dirty-bitmap-remove}. (Since 4.0)
@end table

@b{Features:}
@table @asis
@item @code{deprecated}
Member @code{status} is deprecated.  Use @code{recording} and
@code{locked} instead.
@end table

@b{Since:}
1.3

@end deftp



@deftp {Enum} Qcow2BitmapInfoFlags

An enumeration of flags that a bitmap can report to the user.

@b{Values:}
@table @asis
@item @code{in-use}
This flag is set by any process actively modifying the qcow2 file,
and cleared when the updated bitmap is flushed to the qcow2 image.
The presence of this flag in an offline image means that the bitmap
was not saved correctly after its last usage, and may contain
inconsistent data.
@item @code{auto}
The bitmap must reflect all changes of the virtual disk by any
application that would write to this qcow2 file.
@end table

@b{Since:}
4.0

@end deftp



@deftp {Object} Qcow2BitmapInfo

Qcow2 bitmap information.

@b{Members:}
@table @asis
@item @code{name: string}
the name of the bitmap
@item @code{granularity: int}
granularity of the bitmap in bytes
@item @code{flags: array of Qcow2BitmapInfoFlags}
flags of the bitmap
@end table

@b{Since:}
4.0

@end deftp



@deftp {Object} BlockLatencyHistogramInfo

Block latency histogram.

@b{Members:}
@table @asis
@item @code{boundaries: array of int}
list of interval boundary values in nanoseconds, all greater
than zero and in ascending order.
For example, the list [10, 50, 100] produces the following
histogram intervals: [0, 10), [10, 50), [50, 100), [100, +inf).
@item @code{bins: array of int}
list of io request counts corresponding to histogram intervals.
len(@code{bins}) = len(@code{boundaries}) + 1
For the example above, @code{bins} may be something like [3, 1, 5, 2],
and corresponding histogram looks like:
@end table
@example
     5|           *
@end example

@example
     4|           *
@end example

@example
     3| @strong{         }
@end example

@example
     2| @strong{         }    *
@end example

@example
     1| @strong{    }    @strong{    }
@end example

@example
      +------------------
@end example

@example
          10   50   100
@end example


@b{Since:}
4.0

@end deftp



@deftp {Object} BlockInfo

Block device information.  This structure describes a virtual device and
the backing device associated with it.

@b{Members:}
@table @asis
@item @code{device: string}
The device name associated with the virtual device.
@item @code{qdev: string} (optional)
The qdev ID, or if no ID is assigned, the QOM path of the block
device. (since 2.10)
@item @code{type: string}
This field is returned only for compatibility reasons, it should
not be used (always returns 'unknown')
@item @code{removable: boolean}
True if the device supports removable media.
@item @code{locked: boolean}
True if the guest has locked this device from having its media
removed
@item @code{tray_open: boolean} (optional)
True if the device's tray is open
(only present if it has a tray)
@item @code{dirty-bitmaps: array of BlockDirtyInfo} (optional)
dirty bitmaps information (only present if the
driver has one or more dirty bitmaps) (Since 2.0)
@item @code{io-status: BlockDeviceIoStatus} (optional)
@code{BlockDeviceIoStatus}. Only present if the device
supports it and the VM is configured to stop on errors
(supported device models: virtio-blk, IDE, SCSI except
scsi-generic)
@item @code{inserted: BlockDeviceInfo} (optional)
@code{BlockDeviceInfo} describing the device if media is
present
@end table

@b{Features:}
@table @asis
@item @code{deprecated}
Member @code{dirty-bitmaps} is deprecated.  Use @code{inserted}
member @code{dirty-bitmaps} instead.
@end table

@b{Since:}
0.14.0

@end deftp



@deftp {Object} BlockMeasureInfo

Image file size calculation information.  This structure describes the size
requirements for creating a new image file.

The size requirements depend on the new image file format.  File size always
equals virtual disk size for the 'raw' format, even for sparse POSIX files.
Compact formats such as 'qcow2' represent unallocated and zero regions
efficiently so file size may be smaller than virtual disk size.

The values are upper bounds that are guaranteed to fit the new image file.
Subsequent modification, such as internal snapshot or bitmap creation, may
require additional space and is not covered here.

@b{Members:}
@table @asis
@item @code{required: int}
Size required for a new image file, in bytes.
@item @code{fully-allocated: int}
Image file size, in bytes, once data has been written
to all sectors.
@end table

@b{Since:}
2.10

@end deftp



@deftypefn Command {} query-block

Get a list of BlockInfo for all virtual block devices.

@b{Returns:}
a list of @code{BlockInfo} describing each virtual block device. Filter
nodes that were created implicitly are skipped over.

@b{Since:}
0.14.0

@b{Example:}
@example
-> @{ "execute": "query-block" @}
<- @{
      "return":[
         @{
            "io-status": "ok",
            "device":"ide0-hd0",
            "locked":false,
            "removable":false,
            "inserted":@{
               "ro":false,
               "drv":"qcow2",
               "encrypted":false,
               "file":"disks/test.qcow2",
               "backing_file_depth":1,
               "bps":1000000,
               "bps_rd":0,
               "bps_wr":0,
               "iops":1000000,
               "iops_rd":0,
               "iops_wr":0,
               "bps_max": 8000000,
               "bps_rd_max": 0,
               "bps_wr_max": 0,
               "iops_max": 0,
               "iops_rd_max": 0,
               "iops_wr_max": 0,
               "iops_size": 0,
               "detect_zeroes": "on",
               "write_threshold": 0,
               "image":@{
                  "filename":"disks/test.qcow2",
                  "format":"qcow2",
                  "virtual-size":2048000,
                  "backing_file":"base.qcow2",
                  "full-backing-filename":"disks/base.qcow2",
                  "backing-filename-format":"qcow2",
                  "snapshots":[
                     @{
                        "id": "1",
                        "name": "snapshot1",
                        "vm-state-size": 0,
                        "date-sec": 10000200,
                        "date-nsec": 12,
                        "vm-clock-sec": 206,
                        "vm-clock-nsec": 30
                     @}
                  ],
                  "backing-image":@{
                      "filename":"disks/base.qcow2",
                      "format":"qcow2",
                      "virtual-size":2048000
                  @}
               @}
            @},
            "qdev": "ide_disk",
            "type":"unknown"
         @},
         @{
            "io-status": "ok",
            "device":"ide1-cd0",
            "locked":false,
            "removable":true,
            "qdev": "/machine/unattached/device[23]",
            "tray_open": false,
            "type":"unknown"
         @},
         @{
            "device":"floppy0",
            "locked":false,
            "removable":true,
            "qdev": "/machine/unattached/device[20]",
            "type":"unknown"
         @},
         @{
            "device":"sd0",
            "locked":false,
            "removable":true,
            "type":"unknown"
         @}
      ]
   @}
@end example

@end deftypefn



@deftp {Object} BlockDeviceTimedStats

Statistics of a block device during a given interval of time.

@b{Members:}
@table @asis
@item @code{interval_length: int}
Interval used for calculating the statistics,
in seconds.
@item @code{min_rd_latency_ns: int}
Minimum latency of read operations in the
defined interval, in nanoseconds.
@item @code{min_wr_latency_ns: int}
Minimum latency of write operations in the
defined interval, in nanoseconds.
@item @code{min_flush_latency_ns: int}
Minimum latency of flush operations in the
defined interval, in nanoseconds.
@item @code{max_rd_latency_ns: int}
Maximum latency of read operations in the
defined interval, in nanoseconds.
@item @code{max_wr_latency_ns: int}
Maximum latency of write operations in the
defined interval, in nanoseconds.
@item @code{max_flush_latency_ns: int}
Maximum latency of flush operations in the
defined interval, in nanoseconds.
@item @code{avg_rd_latency_ns: int}
Average latency of read operations in the
defined interval, in nanoseconds.
@item @code{avg_wr_latency_ns: int}
Average latency of write operations in the
defined interval, in nanoseconds.
@item @code{avg_flush_latency_ns: int}
Average latency of flush operations in the
defined interval, in nanoseconds.
@item @code{avg_rd_queue_depth: number}
Average number of pending read operations
in the defined interval.
@item @code{avg_wr_queue_depth: number}
Average number of pending write operations
in the defined interval.
@end table

@b{Since:}
2.5

@end deftp



@deftp {Object} BlockDeviceStats

Statistics of a virtual block device or a block backing device.

@b{Members:}
@table @asis
@item @code{rd_bytes: int}
The number of bytes read by the device.
@item @code{wr_bytes: int}
The number of bytes written by the device.
@item @code{unmap_bytes: int}
The number of bytes unmapped by the device (Since 4.2)
@item @code{rd_operations: int}
The number of read operations performed by the device.
@item @code{wr_operations: int}
The number of write operations performed by the device.
@item @code{flush_operations: int}
The number of cache flush operations performed by the
device (since 0.15.0)
@item @code{unmap_operations: int}
The number of unmap operations performed by the device
(Since 4.2)
@item @code{rd_total_time_ns: int}
Total time spent on reads in nanoseconds (since 0.15.0).
@item @code{wr_total_time_ns: int}
Total time spent on writes in nanoseconds (since 0.15.0).
@item @code{flush_total_time_ns: int}
Total time spent on cache flushes in nanoseconds
(since 0.15.0).
@item @code{unmap_total_time_ns: int}
Total time spent on unmap operations in nanoseconds
(Since 4.2)
@item @code{wr_highest_offset: int}
The offset after the greatest byte written to the
device.  The intended use of this information is for
growable sparse files (like qcow2) that are used on top
of a physical device.
@item @code{rd_merged: int}
Number of read requests that have been merged into another
request (Since 2.3).
@item @code{wr_merged: int}
Number of write requests that have been merged into another
request (Since 2.3).
@item @code{unmap_merged: int}
Number of unmap requests that have been merged into another
request (Since 4.2)
@item @code{idle_time_ns: int} (optional)
Time since the last I/O operation, in
nanoseconds. If the field is absent it means that
there haven't been any operations yet (Since 2.5).
@item @code{failed_rd_operations: int}
The number of failed read operations
performed by the device (Since 2.5)
@item @code{failed_wr_operations: int}
The number of failed write operations
performed by the device (Since 2.5)
@item @code{failed_flush_operations: int}
The number of failed flush operations
performed by the device (Since 2.5)
@item @code{failed_unmap_operations: int}
The number of failed unmap operations performed
by the device (Since 4.2)
@item @code{invalid_rd_operations: int}
The number of invalid read operations
performed by the device (Since 2.5)
@item @code{invalid_wr_operations: int}
The number of invalid write operations
performed by the device (Since 2.5)
@item @code{invalid_flush_operations: int}
The number of invalid flush operations
performed by the device (Since 2.5)
@item @code{invalid_unmap_operations: int}
The number of invalid unmap operations performed
by the device (Since 4.2)
@item @code{account_invalid: boolean}
Whether invalid operations are included in the
last access statistics (Since 2.5)
@item @code{account_failed: boolean}
Whether failed operations are included in the
latency and last access statistics (Since 2.5)
@item @code{timed_stats: array of BlockDeviceTimedStats}
Statistics specific to the set of previously defined
intervals of time (Since 2.5)
@item @code{rd_latency_histogram: BlockLatencyHistogramInfo} (optional)
@code{BlockLatencyHistogramInfo}. (Since 4.0)
@item @code{wr_latency_histogram: BlockLatencyHistogramInfo} (optional)
@code{BlockLatencyHistogramInfo}. (Since 4.0)
@item @code{flush_latency_histogram: BlockLatencyHistogramInfo} (optional)
@code{BlockLatencyHistogramInfo}. (Since 4.0)
@end table

@b{Since:}
0.14.0

@end deftp



@deftp {Object} BlockStatsSpecificFile

File driver statistics

@b{Members:}
@table @asis
@item @code{discard-nb-ok: int}
The number of successful discard operations performed by
the driver.
@item @code{discard-nb-failed: int}
The number of failed discard operations performed by
the driver.
@item @code{discard-bytes-ok: int}
The number of bytes discarded by the driver.
@end table

@b{Since:}
4.2

@end deftp



@deftp {Object} BlockStatsSpecific

Block driver specific statistics

@b{Members:}
@table @asis
@item @code{driver: BlockdevDriver}
Not documented
@item The members of @code{BlockStatsSpecificFile} when @code{driver} is @t{"file"}
@item The members of @code{BlockStatsSpecificFile} when @code{driver} is @t{"host_device"}
@end table

@b{Since:}
4.2

@end deftp



@deftp {Object} BlockStats

Statistics of a virtual block device or a block backing device.

@b{Members:}
@table @asis
@item @code{device: string} (optional)
If the stats are for a virtual block device, the name
corresponding to the virtual block device.
@item @code{node-name: string} (optional)
The node name of the device. (Since 2.3)
@item @code{qdev: string} (optional)
The qdev ID, or if no ID is assigned, the QOM path of the block
device. (since 3.0)
@item @code{stats: BlockDeviceStats}
A @code{BlockDeviceStats} for the device.
@item @code{driver-specific: BlockStatsSpecific} (optional)
Optional driver-specific stats. (Since 4.2)
@item @code{parent: BlockStats} (optional)
This describes the file block device if it has one.
Contains recursively the statistics of the underlying
protocol (e.g. the host file for a qcow2 image). If there is
no underlying protocol, this field is omitted
@item @code{backing: BlockStats} (optional)
This describes the backing block device if it has one.
(Since 2.0)
@end table

@b{Since:}
0.14.0

@end deftp



@deftypefn Command {} query-blockstats

Query the @code{BlockStats} for all virtual block devices.

@b{Arguments:}
@table @asis
@item @code{query-nodes: boolean} (optional)
If true, the command will query all the block nodes
that have a node name, in a list which will include "parent"
information, but not "backing".
If false or omitted, the behavior is as before - query all the
device backends, recursively including their "parent" and
"backing". Filter nodes that were created implicitly are
skipped over in this mode. (Since 2.3)
@end table

@b{Returns:}
A list of @code{BlockStats} for each virtual block devices.

@b{Since:}
0.14.0

@b{Example:}
@example
-> @{ "execute": "query-blockstats" @}
<- @{
      "return":[
         @{
            "device":"ide0-hd0",
            "parent":@{
               "stats":@{
                  "wr_highest_offset":3686448128,
                  "wr_bytes":9786368,
                  "wr_operations":751,
                  "rd_bytes":122567168,
                  "rd_operations":36772
                  "wr_total_times_ns":313253456
                  "rd_total_times_ns":3465673657
                  "flush_total_times_ns":49653
                  "flush_operations":61,
                  "rd_merged":0,
                  "wr_merged":0,
                  "idle_time_ns":2953431879,
                  "account_invalid":true,
                  "account_failed":false
               @}
            @},
            "stats":@{
               "wr_highest_offset":2821110784,
               "wr_bytes":9786368,
               "wr_operations":692,
               "rd_bytes":122739200,
               "rd_operations":36604
               "flush_operations":51,
               "wr_total_times_ns":313253456
               "rd_total_times_ns":3465673657
               "flush_total_times_ns":49653,
               "rd_merged":0,
               "wr_merged":0,
               "idle_time_ns":2953431879,
               "account_invalid":true,
               "account_failed":false
            @},
            "qdev": "/machine/unattached/device[23]"
         @},
         @{
            "device":"ide1-cd0",
            "stats":@{
               "wr_highest_offset":0,
               "wr_bytes":0,
               "wr_operations":0,
               "rd_bytes":0,
               "rd_operations":0
               "flush_operations":0,
               "wr_total_times_ns":0
               "rd_total_times_ns":0
               "flush_total_times_ns":0,
               "rd_merged":0,
               "wr_merged":0,
               "account_invalid":false,
               "account_failed":false
            @},
            "qdev": "/machine/unattached/device[24]"
         @},
         @{
            "device":"floppy0",
            "stats":@{
               "wr_highest_offset":0,
               "wr_bytes":0,
               "wr_operations":0,
               "rd_bytes":0,
               "rd_operations":0
               "flush_operations":0,
               "wr_total_times_ns":0
               "rd_total_times_ns":0
               "flush_total_times_ns":0,
               "rd_merged":0,
               "wr_merged":0,
               "account_invalid":false,
               "account_failed":false
            @},
            "qdev": "/machine/unattached/device[16]"
         @},
         @{
            "device":"sd0",
            "stats":@{
               "wr_highest_offset":0,
               "wr_bytes":0,
               "wr_operations":0,
               "rd_bytes":0,
               "rd_operations":0
               "flush_operations":0,
               "wr_total_times_ns":0
               "rd_total_times_ns":0
               "flush_total_times_ns":0,
               "rd_merged":0,
               "wr_merged":0,
               "account_invalid":false,
               "account_failed":false
            @}
         @}
      ]
   @}
@end example

@end deftypefn



@deftp {Enum} BlockdevOnError

An enumeration of possible behaviors for errors on I/O operations.
The exact meaning depends on whether the I/O was initiated by a guest
or by a block job

@b{Values:}
@table @asis
@item @code{report}
for guest operations, report the error to the guest;
for jobs, cancel the job
@item @code{ignore}
ignore the error, only report a QMP event (BLOCK_IO_ERROR
or BLOCK_JOB_ERROR). The backup, mirror and commit block jobs retry
the failing request later and may still complete successfully. The
stream block job continues to stream and will complete with an
error.
@item @code{enospc}
same as @code{stop} on ENOSPC, same as @code{report} otherwise.
@item @code{stop}
for guest operations, stop the virtual machine;
for jobs, pause the job
@item @code{auto}
inherit the error handling policy of the backend (since: 2.7)
@end table

@b{Since:}
1.3

@end deftp



@deftp {Enum} MirrorSyncMode

An enumeration of possible behaviors for the initial synchronization
phase of storage mirroring.

@b{Values:}
@table @asis
@item @code{top}
copies data in the topmost image to the destination
@item @code{full}
copies data from all images to the destination
@item @code{none}
only copy data written from now on
@item @code{incremental}
only copy data described by the dirty bitmap. (since: 2.4)
@item @code{bitmap}
only copy data described by the dirty bitmap. (since: 4.2)
Behavior on completion is determined by the BitmapSyncMode.
@end table

@b{Since:}
1.3

@end deftp



@deftp {Enum} BitmapSyncMode

An enumeration of possible behaviors for the synchronization of a bitmap
when used for data copy operations.

@b{Values:}
@table @asis
@item @code{on-success}
The bitmap is only synced when the operation is successful.
This is the behavior always used for 'INCREMENTAL' backups.
@item @code{never}
The bitmap is never synchronized with the operation, and is
treated solely as a read-only manifest of blocks to copy.
@item @code{always}
The bitmap is always synchronized with the operation,
regardless of whether or not the operation was successful.
@end table

@b{Since:}
4.2

@end deftp



@deftp {Enum} MirrorCopyMode

An enumeration whose values tell the mirror block job when to
trigger writes to the target.

@b{Values:}
@table @asis
@item @code{background}
copy data in background only.
@item @code{write-blocking}
when data is written to the source, write it
(synchronously) to the target as well.  In
addition, data is copied in background just like in
@code{background} mode.
@end table

@b{Since:}
3.0

@end deftp



@deftp {Object} BlockJobInfo

Information about a long-running block device operation.

@b{Members:}
@table @asis
@item @code{type: string}
the job type ('stream' for image streaming)
@item @code{device: string}
The job identifier. Originally the device name but other
values are allowed since QEMU 2.7
@item @code{len: int}
Estimated @code{offset} value at the completion of the job. This value can
arbitrarily change while the job is running, in both directions.
@item @code{offset: int}
Progress made until now. The unit is arbitrary and the value can
only meaningfully be used for the ratio of @code{offset} to @code{len}. The
value is monotonically increasing.
@item @code{busy: boolean}
false if the job is known to be in a quiescent state, with
no pending I/O.  Since 1.3.
@item @code{paused: boolean}
whether the job is paused or, if @code{busy} is true, will
pause itself as soon as possible.  Since 1.3.
@item @code{speed: int}
the rate limit, bytes per second
@item @code{io-status: BlockDeviceIoStatus}
the status of the job (since 1.3)
@item @code{ready: boolean}
true if the job may be completed (since 2.2)
@item @code{status: JobStatus}
Current job state/status (since 2.12)
@item @code{auto-finalize: boolean}
Job will finalize itself when PENDING, moving to
the CONCLUDED state. (since 2.12)
@item @code{auto-dismiss: boolean}
Job will dismiss itself when CONCLUDED, moving to the NULL
state and disappearing from the query list. (since 2.12)
@item @code{error: string} (optional)
Error information if the job did not complete successfully.
Not set if the job completed successfully. (since 2.12.1)
@end table

@b{Since:}
1.1

@end deftp



@deftypefn Command {} query-block-jobs

Return information about long-running block device operations.

@b{Returns:}
a list of @code{BlockJobInfo} for each active block job

@b{Since:}
1.1

@end deftypefn



@deftypefn Command {} block_passwd

This command sets the password of a block device that has not been open
with a password and requires one.

This command is now obsolete and will always return an error since 2.10

@b{Arguments:}
@table @asis
@item @code{device: string} (optional)
Not documented
@item @code{node-name: string} (optional)
Not documented
@item @code{password: string}
Not documented
@end table

@end deftypefn



@deftypefn Command {} block_resize

Resize a block image while a guest is running.

Either @code{device} or @code{node-name} must be set but not both.

@b{Arguments:}
@table @asis
@item @code{device: string} (optional)
the name of the device to get the image resized
@item @code{node-name: string} (optional)
graph node name to get the image resized (Since 2.0)
@item @code{size: int}
new image size in bytes
@end table

@b{Returns:}
@itemize @minus
@item
nothing on success
@item
If @code{device} is not a valid block device, DeviceNotFound
@end itemize


@b{Since:}
0.14.0

@b{Example:}
@example
-> @{ "execute": "block_resize",
     "arguments": @{ "device": "scratch", "size": 1073741824 @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftp {Enum} NewImageMode

An enumeration that tells QEMU how to set the backing file path in
a new image file.

@b{Values:}
@table @asis
@item @code{existing}
QEMU should look for an existing image file.
@item @code{absolute-paths}
QEMU should create a new image with absolute paths
for the backing file. If there is no backing file available, the new
image will not be backed either.
@end table

@b{Since:}
1.1

@end deftp



@deftp {Object} BlockdevSnapshotSync

Either @code{device} or @code{node-name} must be set but not both.

@b{Members:}
@table @asis
@item @code{device: string} (optional)
the name of the device to take a snapshot of.
@item @code{node-name: string} (optional)
graph node name to generate the snapshot from (Since 2.0)
@item @code{snapshot-file: string}
the target of the new overlay image. If the file
exists, or if it is a device, the overlay will be created in the
existing file/device. Otherwise, a new file will be created.
@item @code{snapshot-node-name: string} (optional)
the graph node name of the new image (Since 2.0)
@item @code{format: string} (optional)
the format of the overlay image, default is 'qcow2'.
@item @code{mode: NewImageMode} (optional)
whether and how QEMU should create a new image, default is
'absolute-paths'.
@end table

@end deftp



@deftp {Object} BlockdevSnapshot



@b{Members:}
@table @asis
@item @code{node: string}
device or node name that will have a snapshot taken.
@item @code{overlay: string}
reference to the existing block device that will become
the overlay of @code{node}, as part of taking the snapshot.
It must not have a current backing file (this can be
achieved by passing "backing": null to blockdev-add).
@end table

@b{Since:}
2.5

@end deftp



@deftp {Object} BackupCommon



@b{Members:}
@table @asis
@item @code{job-id: string} (optional)
identifier for the newly-created block job. If
omitted, the device name will be used. (Since 2.7)
@item @code{device: string}
the device name or node-name of a root node which should be copied.
@item @code{sync: MirrorSyncMode}
what parts of the disk image should be copied to the destination
(all the disk, only the sectors allocated in the topmost image, from a
dirty bitmap, or only new I/O).
@item @code{speed: int} (optional)
the maximum speed, in bytes per second. The default is 0,
for unlimited.
@item @code{bitmap: string} (optional)
The name of a dirty bitmap to use.
Must be present if sync is "bitmap" or "incremental".
Can be present if sync is "full" or "top".
Must not be present otherwise.
(Since 2.4 (drive-backup), 3.1 (blockdev-backup))
@item @code{bitmap-mode: BitmapSyncMode} (optional)
Specifies the type of data the bitmap should contain after
the operation concludes.
Must be present if a bitmap was provided,
Must NOT be present otherwise. (Since 4.2)
@item @code{compress: boolean} (optional)
true to compress data, if the target format supports it.
(default: false) (since 2.8)
@item @code{on-source-error: BlockdevOnError} (optional)
the action to take on an error on the source,
default 'report'.  'stop' and 'enospc' can only be used
if the block device supports io-status (see BlockInfo).
@item @code{on-target-error: BlockdevOnError} (optional)
the action to take on an error on the target,
default 'report' (no limitations, since this applies to
a different block device than @code{device}).
@item @code{auto-finalize: boolean} (optional)
When false, this job will wait in a PENDING state after it has
finished its work, waiting for @code{block-job-finalize} before
making any block graph changes.
When true, this job will automatically
perform its abort or commit actions.
Defaults to true. (Since 2.12)
@item @code{auto-dismiss: boolean} (optional)
When false, this job will wait in a CONCLUDED state after it
has completely ceased all work, and awaits @code{block-job-dismiss}.
When true, this job will automatically disappear from the query
list without user intervention.
Defaults to true. (Since 2.12)
@item @code{filter-node-name: string} (optional)
the node name that should be assigned to the
filter driver that the backup job inserts into the graph
above node specified by @code{drive}. If this option is not given,
a node name is autogenerated. (Since: 4.2)
@end table

@b{Note:}
@code{on-source-error} and @code{on-target-error} only affect background
I/O.  If an error occurs during a guest write request, the device's
rerror/werror actions will be used.

@b{Since:}
4.2

@end deftp



@deftp {Object} DriveBackup



@b{Members:}
@table @asis
@item @code{target: string}
the target of the new image. If the file exists, or if it
is a device, the existing file/device will be used as the new
destination.  If it does not exist, a new file will be created.
@item @code{format: string} (optional)
the format of the new destination, default is to
probe if @code{mode} is 'existing', else the format of the source
@item @code{mode: NewImageMode} (optional)
whether and how QEMU should create a new image, default is
'absolute-paths'.
@item The members of @code{BackupCommon}
@end table

@b{Since:}
1.6

@end deftp



@deftp {Object} BlockdevBackup



@b{Members:}
@table @asis
@item @code{target: string}
the device name or node-name of the backup target node.
@item The members of @code{BackupCommon}
@end table

@b{Since:}
2.3

@end deftp



@deftypefn Command {} blockdev-snapshot-sync

Takes a synchronous snapshot of a block device.

For the arguments, see the documentation of BlockdevSnapshotSync.

@b{Returns:}
@itemize @minus
@item
nothing on success
@item
If @code{device} is not a valid block device, DeviceNotFound
@end itemize


@b{Since:}
0.14.0

@b{Example:}
@example
-> @{ "execute": "blockdev-snapshot-sync",
     "arguments": @{ "device": "ide-hd0",
                    "snapshot-file":
                    "/some/place/my-image",
                    "format": "qcow2" @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftypefn Command {} blockdev-snapshot

Takes a snapshot of a block device.

Take a snapshot, by installing 'node' as the backing image of
'overlay'. Additionally, if 'node' is associated with a block
device, the block device changes to using 'overlay' as its new active
image.

For the arguments, see the documentation of BlockdevSnapshot.

@b{Features:}
@table @asis
@item @code{allow-write-only-overlay}
If present, the check whether this operation is safe
was relaxed so that it can be used to change
backing file of a destination of a blockdev-mirror.
(since 5.0)
@end table

@b{Since:}
2.5

@b{Example:}
@example
-> @{ "execute": "blockdev-add",
     "arguments": @{ "driver": "qcow2",
                    "node-name": "node1534",
                    "file": @{ "driver": "file",
                              "filename": "hd1.qcow2" @},
                    "backing": null @} @}

<- @{ "return": @{@} @}

-> @{ "execute": "blockdev-snapshot",
     "arguments": @{ "node": "ide-hd0",
                    "overlay": "node1534" @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftypefn Command {} change-backing-file

Change the backing file in the image file metadata.  This does not
cause QEMU to reopen the image file to reparse the backing filename
(it may, however, perform a reopen to change permissions from
r/o -> r/w -> r/o, if needed). The new backing file string is written
into the image file metadata, and the QEMU internal strings are
updated.

@b{Arguments:}
@table @asis
@item @code{image-node-name: string}
The name of the block driver state node of the
image to modify. The "device" argument is used
to verify "image-node-name" is in the chain
described by "device".
@item @code{device: string}
The device name or node-name of the root node that owns
image-node-name.
@item @code{backing-file: string}
The string to write as the backing file.  This
string is not validated, so care should be taken
when specifying the string or the image chain may
not be able to be reopened again.
@end table

@b{Returns:}
@itemize @minus
@item
Nothing on success
@item
If "device" does not exist or cannot be determined, DeviceNotFound
@end itemize


@b{Since:}
2.1

@end deftypefn



@deftypefn Command {} block-commit

Live commit of data from overlay image nodes into backing nodes - i.e.,
writes data between 'top' and 'base' into 'base'.

@b{Arguments:}
@table @asis
@item @code{job-id: string} (optional)
identifier for the newly-created block job. If
omitted, the device name will be used. (Since 2.7)
@item @code{device: string}
the device name or node-name of a root node
@item @code{base-node: string} (optional)
The node name of the backing image to write data into.
If not specified, this is the deepest backing image.
(since: 3.1)
@item @code{base: string} (optional)
Same as @code{base-node}, except that it is a file name rather than a node
name. This must be the exact filename string that was used to open the
node; other strings, even if addressing the same file, are not
accepted
@item @code{top-node: string} (optional)
The node name of the backing image within the image chain
which contains the topmost data to be committed down. If
not specified, this is the active layer. (since: 3.1)
@item @code{top: string} (optional)
Same as @code{top-node}, except that it is a file name rather than a node
name. This must be the exact filename string that was used to open the
node; other strings, even if addressing the same file, are not
accepted
@item @code{backing-file: string} (optional)
The backing file string to write into the overlay
image of 'top'.  If 'top' is the active layer,
specifying a backing file string is an error. This
filename is not validated.

If a pathname string is such that it cannot be
resolved by QEMU, that means that subsequent QMP or
HMP commands must use node-names for the image in
question, as filename lookup methods will fail.

If not specified, QEMU will automatically determine
the backing file string to use, or error out if
there is no obvious choice. Care should be taken
when specifying the string, to specify a valid
filename or protocol.
(Since 2.1)

If top == base, that is an error.
If top == active, the job will not be completed by itself,
user needs to complete the job with the block-job-complete
command after getting the ready event. (Since 2.0)

If the base image is smaller than top, then the base image
will be resized to be the same size as top.  If top is
smaller than the base image, the base will not be
truncated.  If you want the base image size to match the
size of the smaller top, you can safely truncate it
yourself once the commit operation successfully completes.
@item @code{speed: int} (optional)
the maximum speed, in bytes per second
@item @code{on-error: BlockdevOnError} (optional)
the action to take on an error. 'ignore' means that the request
should be retried. (default: report; Since: 5.0)
@item @code{filter-node-name: string} (optional)
the node name that should be assigned to the
filter driver that the commit job inserts into the graph
above @code{top}. If this option is not given, a node name is
autogenerated. (Since: 2.9)
@item @code{auto-finalize: boolean} (optional)
When false, this job will wait in a PENDING state after it has
finished its work, waiting for @code{block-job-finalize} before
making any block graph changes.
When true, this job will automatically
perform its abort or commit actions.
Defaults to true. (Since 3.1)
@item @code{auto-dismiss: boolean} (optional)
When false, this job will wait in a CONCLUDED state after it
has completely ceased all work, and awaits @code{block-job-dismiss}.
When true, this job will automatically disappear from the query
list without user intervention.
Defaults to true. (Since 3.1)
@end table

@b{Features:}
@table @asis
@item @code{deprecated}
Members @code{base} and @code{top} are deprecated.  Use @code{base-node}
and @code{top-node} instead.
@end table

@b{Returns:}
@itemize @minus
@item
Nothing on success
@item
If @code{device} does not exist, DeviceNotFound
@item
Any other error returns a GenericError.
@end itemize


@b{Since:}
1.3

@b{Example:}
@example
-> @{ "execute": "block-commit",
     "arguments": @{ "device": "virtio0",
                    "top": "/tmp/snap1.qcow2" @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftypefn Command {} drive-backup

Start a point-in-time copy of a block device to a new destination.  The
status of ongoing drive-backup operations can be checked with
query-block-jobs where the BlockJobInfo.type field has the value 'backup'.
The operation can be stopped before it has completed using the
block-job-cancel command.

@b{Arguments:} the members of @code{DriveBackup}

@b{Returns:}
@itemize @minus
@item
nothing on success
@item
If @code{device} is not a valid block device, GenericError
@end itemize


@b{Since:}
1.6

@b{Example:}
@example
-> @{ "execute": "drive-backup",
     "arguments": @{ "device": "drive0",
                    "sync": "full",
                    "target": "backup.img" @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftypefn Command {} blockdev-backup

Start a point-in-time copy of a block device to a new destination.  The
status of ongoing blockdev-backup operations can be checked with
query-block-jobs where the BlockJobInfo.type field has the value 'backup'.
The operation can be stopped before it has completed using the
block-job-cancel command.

@b{Arguments:} the members of @code{BlockdevBackup}

@b{Returns:}
@itemize @minus
@item
nothing on success
@item
If @code{device} is not a valid block device, DeviceNotFound
@end itemize


@b{Since:}
2.3

@b{Example:}
@example
-> @{ "execute": "blockdev-backup",
     "arguments": @{ "device": "src-id",
                    "sync": "full",
                    "target": "tgt-id" @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftypefn Command {} query-named-block-nodes

Get the named block driver list

@b{Arguments:}
@table @asis
@item @code{flat: boolean} (optional)
Omit the nested data about backing image ("backing-image" key) if true.
Default is false (Since 5.0)
@end table

@b{Returns:}
the list of BlockDeviceInfo

@b{Since:}
2.0

@b{Example:}
@example
-> @{ "execute": "query-named-block-nodes" @}
<- @{ "return": [ @{ "ro":false,
                   "drv":"qcow2",
                   "encrypted":false,
                   "file":"disks/test.qcow2",
                   "node-name": "my-node",
                   "backing_file_depth":1,
                   "bps":1000000,
                   "bps_rd":0,
                   "bps_wr":0,
                   "iops":1000000,
                   "iops_rd":0,
                   "iops_wr":0,
                   "bps_max": 8000000,
                   "bps_rd_max": 0,
                   "bps_wr_max": 0,
                   "iops_max": 0,
                   "iops_rd_max": 0,
                   "iops_wr_max": 0,
                   "iops_size": 0,
                   "write_threshold": 0,
                   "image":@{
                      "filename":"disks/test.qcow2",
                      "format":"qcow2",
                      "virtual-size":2048000,
                      "backing_file":"base.qcow2",
                      "full-backing-filename":"disks/base.qcow2",
                      "backing-filename-format":"qcow2",
                      "snapshots":[
                         @{
                            "id": "1",
                            "name": "snapshot1",
                            "vm-state-size": 0,
                            "date-sec": 10000200,
                            "date-nsec": 12,
                            "vm-clock-sec": 206,
                            "vm-clock-nsec": 30
                         @}
                      ],
                      "backing-image":@{
                          "filename":"disks/base.qcow2",
                          "format":"qcow2",
                          "virtual-size":2048000
                      @}
                   @} @} ] @}
@end example

@end deftypefn



@deftp {Enum} XDbgBlockGraphNodeType



@b{Values:}
@table @asis
@item @code{block-backend}
corresponds to BlockBackend
@item @code{block-job}
corresonds to BlockJob
@item @code{block-driver}
corresponds to BlockDriverState
@end table

@b{Since:}
4.0

@end deftp



@deftp {Object} XDbgBlockGraphNode



@b{Members:}
@table @asis
@item @code{id: int}
Block graph node identifier. This @code{id} is generated only for
x-debug-query-block-graph and does not relate to any other identifiers in
Qemu.
@item @code{type: XDbgBlockGraphNodeType}
Type of graph node. Can be one of block-backend, block-job or
block-driver-state.
@item @code{name: string}
Human readable name of the node. Corresponds to node-name for
block-driver-state nodes; is not guaranteed to be unique in the whole
graph (with block-jobs and block-backends).
@end table

@b{Since:}
4.0

@end deftp



@deftp {Enum} BlockPermission

Enum of base block permissions.

@b{Values:}
@table @asis
@item @code{consistent-read}
A user that has the "permission" of consistent reads is
guaranteed that their view of the contents of the block
device is complete and self-consistent, representing the
contents of a disk at a specific point.
For most block devices (including their backing files) this
is true, but the property cannot be maintained in a few
situations like for intermediate nodes of a commit block
job.
@item @code{write}
This permission is required to change the visible disk contents.
@item @code{write-unchanged}
This permission (which is weaker than BLK_PERM_WRITE) is
both enough and required for writes to the block node when
the caller promises that the visible disk content doesn't
change.
As the BLK_PERM_WRITE permission is strictly stronger,
either is sufficient to perform an unchanging write.
@item @code{resize}
This permission is required to change the size of a block node.
@item @code{graph-mod}
This permission is required to change the node that this
BdrvChild points to.
@end table

@b{Since:}
4.0

@end deftp



@deftp {Object} XDbgBlockGraphEdge

Block Graph edge description for x-debug-query-block-graph.

@b{Members:}
@table @asis
@item @code{parent: int}
parent id
@item @code{child: int}
child id
@item @code{name: string}
name of the relation (examples are 'file' and 'backing')
@item @code{perm: array of BlockPermission}
granted permissions for the parent operating on the child
@item @code{shared-perm: array of BlockPermission}
permissions that can still be granted to other users of the
child while it is still attached to this parent
@end table

@b{Since:}
4.0

@end deftp



@deftp {Object} XDbgBlockGraph

Block Graph - list of nodes and list of edges.

@b{Members:}
@table @asis
@item @code{nodes: array of XDbgBlockGraphNode}
Not documented
@item @code{edges: array of XDbgBlockGraphEdge}
Not documented
@end table

@b{Since:}
4.0

@end deftp



@deftypefn Command {} x-debug-query-block-graph

Get the block graph.

@b{Since:}
4.0

@end deftypefn



@deftypefn Command {} drive-mirror

Start mirroring a block device's writes to a new destination. target
specifies the target of the new image. If the file exists, or if it
is a device, it will be used as the new destination for writes. If
it does not exist, a new file will be created. format specifies the
format of the mirror image, default is to probe if mode='existing',
else the format of the source.

@b{Arguments:} the members of @code{DriveMirror}

@b{Returns:}
@itemize @minus
@item
nothing on success
@item
If @code{device} is not a valid block device, GenericError
@end itemize


@b{Since:}
1.3

@b{Example:}
@example
-> @{ "execute": "drive-mirror",
     "arguments": @{ "device": "ide-hd0",
                    "target": "/some/place/my-image",
                    "sync": "full",
                    "format": "qcow2" @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftp {Object} DriveMirror

A set of parameters describing drive mirror setup.

@b{Members:}
@table @asis
@item @code{job-id: string} (optional)
identifier for the newly-created block job. If
omitted, the device name will be used. (Since 2.7)
@item @code{device: string}
the device name or node-name of a root node whose writes should be
mirrored.
@item @code{target: string}
the target of the new image. If the file exists, or if it
is a device, the existing file/device will be used as the new
destination.  If it does not exist, a new file will be created.
@item @code{format: string} (optional)
the format of the new destination, default is to
probe if @code{mode} is 'existing', else the format of the source
@item @code{node-name: string} (optional)
the new block driver state node name in the graph
(Since 2.1)
@item @code{replaces: string} (optional)
with sync=full graph node name to be replaced by the new
image when a whole image copy is done. This can be used to repair
broken Quorum files. (Since 2.1)
@item @code{mode: NewImageMode} (optional)
whether and how QEMU should create a new image, default is
'absolute-paths'.
@item @code{speed: int} (optional)
the maximum speed, in bytes per second
@item @code{sync: MirrorSyncMode}
what parts of the disk image should be copied to the destination
(all the disk, only the sectors allocated in the topmost image, or
only new I/O).
@item @code{granularity: int} (optional)
granularity of the dirty bitmap, default is 64K
if the image format doesn't have clusters, 4K if the clusters
are smaller than that, else the cluster size.  Must be a
power of 2 between 512 and 64M (since 1.4).
@item @code{buf-size: int} (optional)
maximum amount of data in flight from source to
target (since 1.4).
@item @code{on-source-error: BlockdevOnError} (optional)
the action to take on an error on the source,
default 'report'.  'stop' and 'enospc' can only be used
if the block device supports io-status (see BlockInfo).
@item @code{on-target-error: BlockdevOnError} (optional)
the action to take on an error on the target,
default 'report' (no limitations, since this applies to
a different block device than @code{device}).
@item @code{unmap: boolean} (optional)
Whether to try to unmap target sectors where source has
only zero. If true, and target unallocated sectors will read as zero,
target image sectors will be unmapped; otherwise, zeroes will be
written. Both will result in identical contents.
Default is true. (Since 2.4)
@item @code{copy-mode: MirrorCopyMode} (optional)
when to copy data to the destination; defaults to 'background'
(Since: 3.0)
@item @code{auto-finalize: boolean} (optional)
When false, this job will wait in a PENDING state after it has
finished its work, waiting for @code{block-job-finalize} before
making any block graph changes.
When true, this job will automatically
perform its abort or commit actions.
Defaults to true. (Since 3.1)
@item @code{auto-dismiss: boolean} (optional)
When false, this job will wait in a CONCLUDED state after it
has completely ceased all work, and awaits @code{block-job-dismiss}.
When true, this job will automatically disappear from the query
list without user intervention.
Defaults to true. (Since 3.1)
@end table

@b{Since:}
1.3

@end deftp



@deftp {Object} BlockDirtyBitmap



@b{Members:}
@table @asis
@item @code{node: string}
name of device/node which the bitmap is tracking
@item @code{name: string}
name of the dirty bitmap
@end table

@b{Since:}
2.4

@end deftp



@deftp {Object} BlockDirtyBitmapAdd



@b{Members:}
@table @asis
@item @code{node: string}
name of device/node which the bitmap is tracking
@item @code{name: string}
name of the dirty bitmap (must be less than 1024 bytes)
@item @code{granularity: int} (optional)
the bitmap granularity, default is 64k for
block-dirty-bitmap-add
@item @code{persistent: boolean} (optional)
the bitmap is persistent, i.e. it will be saved to the
corresponding block device image file on its close. For now only
Qcow2 disks support persistent bitmaps. Default is false for
block-dirty-bitmap-add. (Since: 2.10)
@item @code{disabled: boolean} (optional)
the bitmap is created in the disabled state, which means that
it will not track drive changes. The bitmap may be enabled with
block-dirty-bitmap-enable. Default is false. (Since: 4.0)
@end table

@b{Since:}
2.4

@end deftp



@deftp {Alternate} BlockDirtyBitmapMergeSource



@b{Members:}
@table @asis
@item @code{local: string}
name of the bitmap, attached to the same node as target bitmap.
@item @code{external: BlockDirtyBitmap}
bitmap with specified node
@end table

@b{Since:}
4.1

@end deftp



@deftp {Object} BlockDirtyBitmapMerge



@b{Members:}
@table @asis
@item @code{node: string}
name of device/node which the @code{target} bitmap is tracking
@item @code{target: string}
name of the destination dirty bitmap
@item @code{bitmaps: array of BlockDirtyBitmapMergeSource}
name(s) of the source dirty bitmap(s) at @code{node} and/or fully
specifed BlockDirtyBitmap elements. The latter are supported
since 4.1.
@end table

@b{Since:}
4.0

@end deftp



@deftypefn Command {} block-dirty-bitmap-add

Create a dirty bitmap with a name on the node, and start tracking the writes.

@b{Returns:}
@itemize @minus
@item
nothing on success
@item
If @code{node} is not a valid block device or node, DeviceNotFound
@item
If @code{name} is already taken, GenericError with an explanation
@end itemize


@b{Since:}
2.4

@b{Example:}
@example
-> @{ "execute": "block-dirty-bitmap-add",
     "arguments": @{ "node": "drive0", "name": "bitmap0" @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftypefn Command {} block-dirty-bitmap-remove

Stop write tracking and remove the dirty bitmap that was created
with block-dirty-bitmap-add. If the bitmap is persistent, remove it from its
storage too.

@b{Returns:}
@itemize @minus
@item
nothing on success
@item
If @code{node} is not a valid block device or node, DeviceNotFound
@item
If @code{name} is not found, GenericError with an explanation
@item
if @code{name} is frozen by an operation, GenericError
@end itemize


@b{Since:}
2.4

@b{Example:}
@example
-> @{ "execute": "block-dirty-bitmap-remove",
     "arguments": @{ "node": "drive0", "name": "bitmap0" @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftypefn Command {} block-dirty-bitmap-clear

Clear (reset) a dirty bitmap on the device, so that an incremental
backup from this point in time forward will only backup clusters
modified after this clear operation.

@b{Returns:}
@itemize @minus
@item
nothing on success
@item
If @code{node} is not a valid block device, DeviceNotFound
@item
If @code{name} is not found, GenericError with an explanation
@end itemize


@b{Since:}
2.4

@b{Example:}
@example
-> @{ "execute": "block-dirty-bitmap-clear",
     "arguments": @{ "node": "drive0", "name": "bitmap0" @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftypefn Command {} block-dirty-bitmap-enable

Enables a dirty bitmap so that it will begin tracking disk changes.

@b{Returns:}
@itemize @minus
@item
nothing on success
@item
If @code{node} is not a valid block device, DeviceNotFound
@item
If @code{name} is not found, GenericError with an explanation
@end itemize


@b{Since:}
4.0

@b{Example:}
@example
-> @{ "execute": "block-dirty-bitmap-enable",
     "arguments": @{ "node": "drive0", "name": "bitmap0" @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftypefn Command {} block-dirty-bitmap-disable

Disables a dirty bitmap so that it will stop tracking disk changes.

@b{Returns:}
@itemize @minus
@item
nothing on success
@item
If @code{node} is not a valid block device, DeviceNotFound
@item
If @code{name} is not found, GenericError with an explanation
@end itemize


@b{Since:}
4.0

@b{Example:}
@example
-> @{ "execute": "block-dirty-bitmap-disable",
     "arguments": @{ "node": "drive0", "name": "bitmap0" @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftypefn Command {} block-dirty-bitmap-merge

Merge dirty bitmaps listed in @code{bitmaps} to the @code{target} dirty bitmap.
Dirty bitmaps in @code{bitmaps} will be unchanged, except if it also appears
as the @code{target} bitmap. Any bits already set in @code{target} will still be
set after the merge, i.e., this operation does not clear the target.
On error, @code{target} is unchanged.

The resulting bitmap will count as dirty any clusters that were dirty in any
of the source bitmaps. This can be used to achieve backup checkpoints, or in
simpler usages, to copy bitmaps.

@b{Returns:}
@itemize @minus
@item
nothing on success
@item
If @code{node} is not a valid block device, DeviceNotFound
@item
If any bitmap in @code{bitmaps} or @code{target} is not found, GenericError
@item
If any of the bitmaps have different sizes or granularities,
GenericError
@end itemize


@b{Since:}
4.0

@b{Example:}
@example
-> @{ "execute": "block-dirty-bitmap-merge",
     "arguments": @{ "node": "drive0", "target": "bitmap0",
                    "bitmaps": ["bitmap1"] @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftp {Object} BlockDirtyBitmapSha256

SHA256 hash of dirty bitmap data

@b{Members:}
@table @asis
@item @code{sha256: string}
ASCII representation of SHA256 bitmap hash
@end table

@b{Since:}
2.10

@end deftp



@deftypefn Command {} x-debug-block-dirty-bitmap-sha256

Get bitmap SHA256.

@b{Returns:}
@itemize @minus
@item
BlockDirtyBitmapSha256 on success
@item
If @code{node} is not a valid block device, DeviceNotFound
@item
If @code{name} is not found or if hashing has failed, GenericError with an
explanation
@end itemize


@b{Since:}
2.10

@end deftypefn



@deftypefn Command {} blockdev-mirror

Start mirroring a block device's writes to a new destination.

@b{Arguments:}
@table @asis
@item @code{job-id: string} (optional)
identifier for the newly-created block job. If
omitted, the device name will be used. (Since 2.7)
@item @code{device: string}
The device name or node-name of a root node whose writes should be
mirrored.
@item @code{target: string}
the id or node-name of the block device to mirror to. This mustn't be
attached to guest.
@item @code{replaces: string} (optional)
with sync=full graph node name to be replaced by the new
image when a whole image copy is done. This can be used to repair
broken Quorum files.
@item @code{speed: int} (optional)
the maximum speed, in bytes per second
@item @code{sync: MirrorSyncMode}
what parts of the disk image should be copied to the destination
(all the disk, only the sectors allocated in the topmost image, or
only new I/O).
@item @code{granularity: int} (optional)
granularity of the dirty bitmap, default is 64K
if the image format doesn't have clusters, 4K if the clusters
are smaller than that, else the cluster size.  Must be a
power of 2 between 512 and 64M
@item @code{buf-size: int} (optional)
maximum amount of data in flight from source to
target
@item @code{on-source-error: BlockdevOnError} (optional)
the action to take on an error on the source,
default 'report'.  'stop' and 'enospc' can only be used
if the block device supports io-status (see BlockInfo).
@item @code{on-target-error: BlockdevOnError} (optional)
the action to take on an error on the target,
default 'report' (no limitations, since this applies to
a different block device than @code{device}).
@item @code{filter-node-name: string} (optional)
the node name that should be assigned to the
filter driver that the mirror job inserts into the graph
above @code{device}. If this option is not given, a node name is
autogenerated. (Since: 2.9)
@item @code{copy-mode: MirrorCopyMode} (optional)
when to copy data to the destination; defaults to 'background'
(Since: 3.0)
@item @code{auto-finalize: boolean} (optional)
When false, this job will wait in a PENDING state after it has
finished its work, waiting for @code{block-job-finalize} before
making any block graph changes.
When true, this job will automatically
perform its abort or commit actions.
Defaults to true. (Since 3.1)
@item @code{auto-dismiss: boolean} (optional)
When false, this job will wait in a CONCLUDED state after it
has completely ceased all work, and awaits @code{block-job-dismiss}.
When true, this job will automatically disappear from the query
list without user intervention.
Defaults to true. (Since 3.1)
@end table

@b{Returns:}
nothing on success.

@b{Since:}
2.6

@b{Example:}
@example
-> @{ "execute": "blockdev-mirror",
     "arguments": @{ "device": "ide-hd0",
                    "target": "target0",
                    "sync": "full" @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftp {Object} BlockIOThrottle

A set of parameters describing block throttling.

@b{Members:}
@table @asis
@item @code{device: string} (optional)
Block device name
@item @code{id: string} (optional)
The name or QOM path of the guest device (since: 2.8)
@item @code{bps: int}
total throughput limit in bytes per second
@item @code{bps_rd: int}
read throughput limit in bytes per second
@item @code{bps_wr: int}
write throughput limit in bytes per second
@item @code{iops: int}
total I/O operations per second
@item @code{iops_rd: int}
read I/O operations per second
@item @code{iops_wr: int}
write I/O operations per second
@item @code{bps_max: int} (optional)
total throughput limit during bursts,
in bytes (Since 1.7)
@item @code{bps_rd_max: int} (optional)
read throughput limit during bursts,
in bytes (Since 1.7)
@item @code{bps_wr_max: int} (optional)
write throughput limit during bursts,
in bytes (Since 1.7)
@item @code{iops_max: int} (optional)
total I/O operations per second during bursts,
in bytes (Since 1.7)
@item @code{iops_rd_max: int} (optional)
read I/O operations per second during bursts,
in bytes (Since 1.7)
@item @code{iops_wr_max: int} (optional)
write I/O operations per second during bursts,
in bytes (Since 1.7)
@item @code{bps_max_length: int} (optional)
maximum length of the @code{bps_max} burst
period, in seconds. It must only
be set if @code{bps_max} is set as well.
Defaults to 1. (Since 2.6)
@item @code{bps_rd_max_length: int} (optional)
maximum length of the @code{bps_rd_max}
burst period, in seconds. It must only
be set if @code{bps_rd_max} is set as well.
Defaults to 1. (Since 2.6)
@item @code{bps_wr_max_length: int} (optional)
maximum length of the @code{bps_wr_max}
burst period, in seconds. It must only
be set if @code{bps_wr_max} is set as well.
Defaults to 1. (Since 2.6)
@item @code{iops_max_length: int} (optional)
maximum length of the @code{iops} burst
period, in seconds. It must only
be set if @code{iops_max} is set as well.
Defaults to 1. (Since 2.6)
@item @code{iops_rd_max_length: int} (optional)
maximum length of the @code{iops_rd_max}
burst period, in seconds. It must only
be set if @code{iops_rd_max} is set as well.
Defaults to 1. (Since 2.6)
@item @code{iops_wr_max_length: int} (optional)
maximum length of the @code{iops_wr_max}
burst period, in seconds. It must only
be set if @code{iops_wr_max} is set as well.
Defaults to 1. (Since 2.6)
@item @code{iops_size: int} (optional)
an I/O size in bytes (Since 1.7)
@item @code{group: string} (optional)
throttle group name (Since 2.4)
@end table

@b{Features:}
@table @asis
@item @code{deprecated}
Member @code{device} is deprecated.  Use @code{id} instead.
@end table

@b{Since:}
1.1

@end deftp



@deftp {Object} ThrottleLimits

Limit parameters for throttling.
Since some limit combinations are illegal, limits should always be set in one
transaction. All fields are optional. When setting limits, if a field is
missing the current value is not changed.

@b{Members:}
@table @asis
@item @code{iops-total: int} (optional)
limit total I/O operations per second
@item @code{iops-total-max: int} (optional)
I/O operations burst
@item @code{iops-total-max-length: int} (optional)
length of the iops-total-max burst period, in seconds
It must only be set if @code{iops-total-max} is set as well.
@item @code{iops-read: int} (optional)
limit read operations per second
@item @code{iops-read-max: int} (optional)
I/O operations read burst
@item @code{iops-read-max-length: int} (optional)
length of the iops-read-max burst period, in seconds
It must only be set if @code{iops-read-max} is set as well.
@item @code{iops-write: int} (optional)
limit write operations per second
@item @code{iops-write-max: int} (optional)
I/O operations write burst
@item @code{iops-write-max-length: int} (optional)
length of the iops-write-max burst period, in seconds
It must only be set if @code{iops-write-max} is set as well.
@item @code{bps-total: int} (optional)
limit total bytes per second
@item @code{bps-total-max: int} (optional)
total bytes burst
@item @code{bps-total-max-length: int} (optional)
length of the bps-total-max burst period, in seconds.
It must only be set if @code{bps-total-max} is set as well.
@item @code{bps-read: int} (optional)
limit read bytes per second
@item @code{bps-read-max: int} (optional)
total bytes read burst
@item @code{bps-read-max-length: int} (optional)
length of the bps-read-max burst period, in seconds
It must only be set if @code{bps-read-max} is set as well.
@item @code{bps-write: int} (optional)
limit write bytes per second
@item @code{bps-write-max: int} (optional)
total bytes write burst
@item @code{bps-write-max-length: int} (optional)
length of the bps-write-max burst period, in seconds
It must only be set if @code{bps-write-max} is set as well.
@item @code{iops-size: int} (optional)
when limiting by iops max size of an I/O in bytes
@end table

@b{Since:}
2.11

@end deftp



@deftypefn Command {} block-stream

Copy data from a backing file into a block device.

The block streaming operation is performed in the background until the entire
backing file has been copied.  This command returns immediately once streaming
has started.  The status of ongoing block streaming operations can be checked
with query-block-jobs.  The operation can be stopped before it has completed
using the block-job-cancel command.

The node that receives the data is called the top image, can be located in
any part of the chain (but always above the base image; see below) and can be
specified using its device or node name. Earlier qemu versions only allowed
'device' to name the top level node; presence of the 'base-node' parameter
during introspection can be used as a witness of the enhanced semantics
of 'device'.

If a base file is specified then sectors are not copied from that base file and
its backing chain.  When streaming completes the image file will have the base
file as its backing file.  This can be used to stream a subset of the backing
file chain instead of flattening the entire image.

On successful completion the image file is updated to drop the backing file
and the BLOCK_JOB_COMPLETED event is emitted.

@b{Arguments:}
@table @asis
@item @code{job-id: string} (optional)
identifier for the newly-created block job. If
omitted, the device name will be used. (Since 2.7)
@item @code{device: string}
the device or node name of the top image
@item @code{base: string} (optional)
the common backing file name.
It cannot be set if @code{base-node} is also set.
@item @code{base-node: string} (optional)
the node name of the backing file.
It cannot be set if @code{base} is also set. (Since 2.8)
@item @code{backing-file: string} (optional)
The backing file string to write into the top
image. This filename is not validated.

If a pathname string is such that it cannot be
resolved by QEMU, that means that subsequent QMP or
HMP commands must use node-names for the image in
question, as filename lookup methods will fail.

If not specified, QEMU will automatically determine
the backing file string to use, or error out if there
is no obvious choice.  Care should be taken when
specifying the string, to specify a valid filename or
protocol.
(Since 2.1)
@item @code{speed: int} (optional)
the maximum speed, in bytes per second
@item @code{on-error: BlockdevOnError} (optional)
the action to take on an error (default report).
'stop' and 'enospc' can only be used if the block device
supports io-status (see BlockInfo).  Since 1.3.
@item @code{auto-finalize: boolean} (optional)
When false, this job will wait in a PENDING state after it has
finished its work, waiting for @code{block-job-finalize} before
making any block graph changes.
When true, this job will automatically
perform its abort or commit actions.
Defaults to true. (Since 3.1)
@item @code{auto-dismiss: boolean} (optional)
When false, this job will wait in a CONCLUDED state after it
has completely ceased all work, and awaits @code{block-job-dismiss}.
When true, this job will automatically disappear from the query
list without user intervention.
Defaults to true. (Since 3.1)
@end table

@b{Returns:}
@itemize @minus
@item
Nothing on success.
@item
If @code{device} does not exist, DeviceNotFound.
@end itemize


@b{Since:}
1.1

@b{Example:}
@example
-> @{ "execute": "block-stream",
     "arguments": @{ "device": "virtio0",
                    "base": "/tmp/master.qcow2" @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftypefn Command {} block-job-set-speed

Set maximum speed for a background block operation.

This command can only be issued when there is an active block job.

Throttling can be disabled by setting the speed to 0.

@b{Arguments:}
@table @asis
@item @code{device: string}
The job identifier. This used to be a device name (hence
the name of the parameter), but since QEMU 2.7 it can have
other values.
@item @code{speed: int}
the maximum speed, in bytes per second, or 0 for unlimited.
Defaults to 0.
@end table

@b{Returns:}
@itemize @minus
@item
Nothing on success
@item
If no background operation is active on this device, DeviceNotActive
@end itemize


@b{Since:}
1.1

@end deftypefn



@deftypefn Command {} block-job-cancel

Stop an active background block operation.

This command returns immediately after marking the active background block
operation for cancellation.  It is an error to call this command if no
operation is in progress.

The operation will cancel as soon as possible and then emit the
BLOCK_JOB_CANCELLED event.  Before that happens the job is still visible when
enumerated using query-block-jobs.

Note that if you issue 'block-job-cancel' after 'drive-mirror' has indicated
(via the event BLOCK_JOB_READY) that the source and destination are
synchronized, then the event triggered by this command changes to
BLOCK_JOB_COMPLETED, to indicate that the mirroring has ended and the
destination now has a point-in-time copy tied to the time of the cancellation.

For streaming, the image file retains its backing file unless the streaming
operation happens to complete just as it is being cancelled.  A new streaming
operation can be started at a later time to finish copying all data from the
backing file.

@b{Arguments:}
@table @asis
@item @code{device: string}
The job identifier. This used to be a device name (hence
the name of the parameter), but since QEMU 2.7 it can have
other values.
@item @code{force: boolean} (optional)
If true, and the job has already emitted the event BLOCK_JOB_READY,
abandon the job immediately (even if it is paused) instead of waiting
for the destination to complete its final synchronization (since 1.3)
@end table

@b{Returns:}
@itemize @minus
@item
Nothing on success
@item
If no background operation is active on this device, DeviceNotActive
@end itemize


@b{Since:}
1.1

@end deftypefn



@deftypefn Command {} block-job-pause

Pause an active background block operation.

This command returns immediately after marking the active background block
operation for pausing.  It is an error to call this command if no
operation is in progress or if the job is already paused.

The operation will pause as soon as possible.  No event is emitted when
the operation is actually paused.  Cancelling a paused job automatically
resumes it.

@b{Arguments:}
@table @asis
@item @code{device: string}
The job identifier. This used to be a device name (hence
the name of the parameter), but since QEMU 2.7 it can have
other values.
@end table

@b{Returns:}
@itemize @minus
@item
Nothing on success
@item
If no background operation is active on this device, DeviceNotActive
@end itemize


@b{Since:}
1.3

@end deftypefn



@deftypefn Command {} block-job-resume

Resume an active background block operation.

This command returns immediately after resuming a paused background block
operation.  It is an error to call this command if no operation is in
progress or if the job is not paused.

This command also clears the error status of the job.

@b{Arguments:}
@table @asis
@item @code{device: string}
The job identifier. This used to be a device name (hence
the name of the parameter), but since QEMU 2.7 it can have
other values.
@end table

@b{Returns:}
@itemize @minus
@item
Nothing on success
@item
If no background operation is active on this device, DeviceNotActive
@end itemize


@b{Since:}
1.3

@end deftypefn



@deftypefn Command {} block-job-complete

Manually trigger completion of an active background block operation.  This
is supported for drive mirroring, where it also switches the device to
write to the target path only.  The ability to complete is signaled with
a BLOCK_JOB_READY event.

This command completes an active background block operation synchronously.
The ordering of this command's return with the BLOCK_JOB_COMPLETED event
is not defined.  Note that if an I/O error occurs during the processing of
this command: 1) the command itself will fail; 2) the error will be processed
according to the rerror/werror arguments that were specified when starting
the operation.

A cancelled or paused job cannot be completed.

@b{Arguments:}
@table @asis
@item @code{device: string}
The job identifier. This used to be a device name (hence
the name of the parameter), but since QEMU 2.7 it can have
other values.
@end table

@b{Returns:}
@itemize @minus
@item
Nothing on success
@item
If no background operation is active on this device, DeviceNotActive
@end itemize


@b{Since:}
1.3

@end deftypefn



@deftypefn Command {} block-job-dismiss

For jobs that have already concluded, remove them from the block-job-query
list. This command only needs to be run for jobs which were started with
QEMU 2.12+ job lifetime management semantics.

This command will refuse to operate on any job that has not yet reached
its terminal state, JOB_STATUS_CONCLUDED. For jobs that make use of the
BLOCK_JOB_READY event, block-job-cancel or block-job-complete will still need
to be used as appropriate.

@b{Arguments:}
@table @asis
@item @code{id: string}
The job identifier.
@end table

@b{Returns:}
Nothing on success

@b{Since:}
2.12

@end deftypefn



@deftypefn Command {} block-job-finalize

Once a job that has manual=true reaches the pending state, it can be
instructed to finalize any graph changes and do any necessary cleanup
via this command.
For jobs in a transaction, instructing one job to finalize will force
ALL jobs in the transaction to finalize, so it is only necessary to instruct
a single member job to finalize.

@b{Arguments:}
@table @asis
@item @code{id: string}
The job identifier.
@end table

@b{Returns:}
Nothing on success

@b{Since:}
2.12

@end deftypefn



@deftp {Enum} BlockdevDiscardOptions

Determines how to handle discard requests.

@b{Values:}
@table @asis
@item @code{ignore}
Ignore the request
@item @code{unmap}
Forward as an unmap request
@end table

@b{Since:}
2.9

@end deftp



@deftp {Enum} BlockdevDetectZeroesOptions

Describes the operation mode for the automatic conversion of plain
zero writes by the OS to driver specific optimized zero write commands.

@b{Values:}
@table @asis
@item @code{off}
Disabled (default)
@item @code{on}
Enabled
@item @code{unmap}
Enabled and even try to unmap blocks if possible. This requires
also that @code{BlockdevDiscardOptions} is set to unmap for this device.
@end table

@b{Since:}
2.1

@end deftp



@deftp {Enum} BlockdevAioOptions

Selects the AIO backend to handle I/O requests

@b{Values:}
@table @asis
@item @code{threads}
Use qemu's thread pool
@item @code{native}
Use native AIO backend (only Linux and Windows)
@item @code{io_uring}
Use linux io_uring (since 5.0)
@*@b{If:} @code{defined(CONFIG_LINUX_IO_URING)}
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevCacheOptions

Includes cache-related options for block devices

@b{Members:}
@table @asis
@item @code{direct: boolean} (optional)
enables use of O_DIRECT (bypass the host page cache;
default: false)
@item @code{no-flush: boolean} (optional)
ignore any flush requests for the device (default:
false)
@end table

@b{Since:}
2.9

@end deftp



@deftp {Enum} BlockdevDriver

Drivers that are supported in block device operations.

@b{Values:}
@table @asis
@item @code{vxhs}
Since 2.10
@item @code{throttle}
Since 2.11
@item @code{nvme}
Since 2.12
@item @code{copy-on-read}
Since 3.0
@item @code{blklogwrites}
Since 3.0
@item @code{blkreplay}
Since 4.2
@item @code{compress}
Since 5.0
@item @code{blkdebug}
Not documented
@item @code{blkverify}
Not documented
@item @code{bochs}
Not documented
@item @code{cloop}
Not documented
@item @code{dmg}
Not documented
@item @code{file}
Not documented
@item @code{ftp}
Not documented
@item @code{ftps}
Not documented
@item @code{gluster}
Not documented
@item @code{host_cdrom}
Not documented
@item @code{host_device}
Not documented
@item @code{http}
Not documented
@item @code{https}
Not documented
@item @code{iscsi}
Not documented
@item @code{luks}
Not documented
@item @code{nbd}
Not documented
@item @code{nfs}
Not documented
@item @code{null-aio}
Not documented
@item @code{null-co}
Not documented
@item @code{parallels}
Not documented
@item @code{qcow}
Not documented
@item @code{qcow2}
Not documented
@item @code{qed}
Not documented
@item @code{quorum}
Not documented
@item @code{raw}
Not documented
@item @code{rbd}
Not documented
@item @code{replication}
Not documented
@*@b{If:} @code{defined(CONFIG_REPLICATION)}
@item @code{sheepdog}
Not documented
@item @code{ssh}
Not documented
@item @code{vdi}
Not documented
@item @code{vhdx}
Not documented
@item @code{vmdk}
Not documented
@item @code{vpc}
Not documented
@item @code{vvfat}
Not documented
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsFile

Driver specific block device options for the file backend.

@b{Members:}
@table @asis
@item @code{filename: string}
path to the image file
@item @code{pr-manager: string} (optional)
the id for the object that will handle persistent reservations
for this device (default: none, forward the commands via SG_IO;
since 2.11)
@item @code{aio: BlockdevAioOptions} (optional)
AIO backend (default: threads) (since: 2.8)
@item @code{locking: OnOffAuto} (optional)
whether to enable file locking. If set to 'auto', only enable
when Open File Descriptor (OFD) locking API is available
(default: auto, since 2.10)
@item @code{drop-cache: boolean} (optional)
invalidate page cache during live migration.  This prevents
stale data on the migration destination with cache.direct=off.
Currently only supported on Linux hosts.
(default: on, since: 4.0)
@*@b{If:} @code{defined(CONFIG_LINUX)}
@item @code{x-check-cache-dropped: boolean} (optional)
whether to check that page cache was dropped on live
migration.  May cause noticeable delays if the image
file is large, do not use in production.
(default: off) (since: 3.0)
@end table

@b{Features:}
@table @asis
@item @code{dynamic-auto-read-only}
If present, enabled auto-read-only means that the
driver will open the image read-only at first,
dynamically reopen the image file read-write when
the first writer is attached to the node and reopen
read-only when the last writer is detached. This
allows giving QEMU write permissions only on demand
when an operation actually needs write access.
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsNull

Driver specific block device options for the null backend.

@b{Members:}
@table @asis
@item @code{size: int} (optional)
size of the device in bytes.
@item @code{latency-ns: int} (optional)
emulated latency (in nanoseconds) in processing
requests. Default to zero which completes requests immediately.
(Since 2.4)
@item @code{read-zeroes: boolean} (optional)
if true, reads from the device produce zeroes; if false, the
buffer is left unchanged. (default: false; since: 4.1)
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsNVMe

Driver specific block device options for the NVMe backend.

@b{Members:}
@table @asis
@item @code{device: string}
PCI controller address of the NVMe device in
format hhhh:bb:ss.f (host:bus:slot.function)
@item @code{namespace: int}
namespace number of the device, starting from 1.
@end table
Note that the PCI @code{device} must have been unbound from any host
kernel driver before instructing QEMU to add the blockdev.

@b{Since:}
2.12

@end deftp



@deftp {Object} BlockdevOptionsVVFAT

Driver specific block device options for the vvfat protocol.

@b{Members:}
@table @asis
@item @code{dir: string}
directory to be exported as FAT image
@item @code{fat-type: int} (optional)
FAT type: 12, 16 or 32
@item @code{floppy: boolean} (optional)
whether to export a floppy image (true) or
partitioned hard disk (false; default)
@item @code{label: string} (optional)
set the volume label, limited to 11 bytes. FAT16 and
FAT32 traditionally have some restrictions on labels, which are
ignored by most operating systems. Defaults to "QEMU VVFAT".
(since 2.4)
@item @code{rw: boolean} (optional)
whether to allow write operations (default: false)
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsGenericFormat

Driver specific block device options for image format that have no option
besides their data source.

@b{Members:}
@table @asis
@item @code{file: BlockdevRef}
reference to or definition of the data source block device
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsLUKS

Driver specific block device options for LUKS.

@b{Members:}
@table @asis
@item @code{key-secret: string} (optional)
the ID of a QCryptoSecret object providing
the decryption key (since 2.6). Mandatory except when
doing a metadata-only probe of the image.
@item The members of @code{BlockdevOptionsGenericFormat}
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsGenericCOWFormat

Driver specific block device options for image format that have no option
besides their data source and an optional backing file.

@b{Members:}
@table @asis
@item @code{backing: BlockdevRefOrNull} (optional)
reference to or definition of the backing file block
device, null disables the backing file entirely.
Defaults to the backing file stored the image file.
@item The members of @code{BlockdevOptionsGenericFormat}
@end table

@b{Since:}
2.9

@end deftp



@deftp {Enum} Qcow2OverlapCheckMode

General overlap check modes.

@b{Values:}
@table @asis
@item @code{none}
Do not perform any checks
@item @code{constant}
Perform only checks which can be done in constant time and
without reading anything from disk
@item @code{cached}
Perform only checks which can be done without reading anything
from disk
@item @code{all}
Perform all available overlap checks
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} Qcow2OverlapCheckFlags

Structure of flags for each metadata structure. Setting a field to 'true'
makes qemu guard that structure against unintended overwriting. The default
value is chosen according to the template given.

@b{Members:}
@table @asis
@item @code{template: Qcow2OverlapCheckMode} (optional)
Specifies a template mode which can be adjusted using the other
flags, defaults to 'cached'
@item @code{bitmap-directory: boolean} (optional)
since 3.0
@item @code{main-header: boolean} (optional)
Not documented
@item @code{active-l1: boolean} (optional)
Not documented
@item @code{active-l2: boolean} (optional)
Not documented
@item @code{refcount-table: boolean} (optional)
Not documented
@item @code{refcount-block: boolean} (optional)
Not documented
@item @code{snapshot-table: boolean} (optional)
Not documented
@item @code{inactive-l1: boolean} (optional)
Not documented
@item @code{inactive-l2: boolean} (optional)
Not documented
@end table

@b{Since:}
2.9

@end deftp



@deftp {Alternate} Qcow2OverlapChecks

Specifies which metadata structures should be guarded against unintended
overwriting.

@b{Members:}
@table @asis
@item @code{flags: Qcow2OverlapCheckFlags}
set of flags for separate specification of each metadata structure
type
@item @code{mode: Qcow2OverlapCheckMode}
named mode which chooses a specific set of flags
@end table

@b{Since:}
2.9

@end deftp



@deftp {Enum} BlockdevQcowEncryptionFormat



@b{Values:}
@table @asis
@item @code{aes}
AES-CBC with plain64 initialization vectors
@end table

@b{Since:}
2.10

@end deftp



@deftp {Object} BlockdevQcowEncryption



@b{Members:}
@table @asis
@item @code{format: BlockdevQcowEncryptionFormat}
Not documented
@item The members of @code{QCryptoBlockOptionsQCow} when @code{format} is @t{"aes"}
@end table

@b{Since:}
2.10

@end deftp



@deftp {Object} BlockdevOptionsQcow

Driver specific block device options for qcow.

@b{Members:}
@table @asis
@item @code{encrypt: BlockdevQcowEncryption} (optional)
Image decryption options. Mandatory for
encrypted images, except when doing a metadata-only
probe of the image.
@item The members of @code{BlockdevOptionsGenericCOWFormat}
@end table

@b{Since:}
2.10

@end deftp



@deftp {Enum} BlockdevQcow2EncryptionFormat



@b{Values:}
@table @asis
@item @code{aes}
AES-CBC with plain64 initialization vectors
@item @code{luks}
Not documented
@end table

@b{Since:}
2.10

@end deftp



@deftp {Object} BlockdevQcow2Encryption



@b{Members:}
@table @asis
@item @code{format: BlockdevQcow2EncryptionFormat}
Not documented
@item The members of @code{QCryptoBlockOptionsQCow} when @code{format} is @t{"aes"}
@item The members of @code{QCryptoBlockOptionsLUKS} when @code{format} is @t{"luks"}
@end table

@b{Since:}
2.10

@end deftp



@deftp {Object} BlockdevOptionsQcow2

Driver specific block device options for qcow2.

@b{Members:}
@table @asis
@item @code{lazy-refcounts: boolean} (optional)
whether to enable the lazy refcounts
feature (default is taken from the image file)
@item @code{pass-discard-request: boolean} (optional)
whether discard requests to the qcow2
device should be forwarded to the data source
@item @code{pass-discard-snapshot: boolean} (optional)
whether discard requests for the data source
should be issued when a snapshot operation (e.g.
deleting a snapshot) frees clusters in the qcow2 file
@item @code{pass-discard-other: boolean} (optional)
whether discard requests for the data source
should be issued on other occasions where a cluster
gets freed
@item @code{overlap-check: Qcow2OverlapChecks} (optional)
which overlap checks to perform for writes
to the image, defaults to 'cached' (since 2.2)
@item @code{cache-size: int} (optional)
the maximum total size of the L2 table and
refcount block caches in bytes (since 2.2)
@item @code{l2-cache-size: int} (optional)
the maximum size of the L2 table cache in
bytes (since 2.2)
@item @code{l2-cache-entry-size: int} (optional)
the size of each entry in the L2 cache in
bytes. It must be a power of two between 512
and the cluster size. The default value is
the cluster size (since 2.12)
@item @code{refcount-cache-size: int} (optional)
the maximum size of the refcount block cache
in bytes (since 2.2)
@item @code{cache-clean-interval: int} (optional)
clean unused entries in the L2 and refcount
caches. The interval is in seconds. The default value
is 600 on supporting platforms, and 0 on other
platforms. 0 disables this feature. (since 2.5)
@item @code{encrypt: BlockdevQcow2Encryption} (optional)
Image decryption options. Mandatory for
encrypted images, except when doing a metadata-only
probe of the image. (since 2.10)
@item @code{data-file: BlockdevRef} (optional)
reference to or definition of the external data file.
This may only be specified for images that require an
external data file. If it is not specified for such
an image, the data file name is loaded from the image
file. (since 4.0)
@item The members of @code{BlockdevOptionsGenericCOWFormat}
@end table

@b{Since:}
2.9

@end deftp



@deftp {Enum} SshHostKeyCheckMode



@b{Values:}
@table @asis
@item @code{none}
Don't check the host key at all
@item @code{hash}
Compare the host key with a given hash
@item @code{known_hosts}
Check the host key against the known_hosts file
@end table

@b{Since:}
2.12

@end deftp



@deftp {Enum} SshHostKeyCheckHashType



@b{Values:}
@table @asis
@item @code{md5}
The given hash is an md5 hash
@item @code{sha1}
The given hash is an sha1 hash
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} SshHostKeyHash



@b{Members:}
@table @asis
@item @code{type: SshHostKeyCheckHashType}
The hash algorithm used for the hash
@item @code{hash: string}
The expected hash value
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} SshHostKeyCheck



@b{Members:}
@table @asis
@item @code{mode: SshHostKeyCheckMode}
Not documented
@item The members of @code{SshHostKeyHash} when @code{mode} is @t{"hash"}
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} BlockdevOptionsSsh



@b{Members:}
@table @asis
@item @code{server: InetSocketAddress}
host address
@item @code{path: string}
path to the image on the host
@item @code{user: string} (optional)
user as which to connect, defaults to current
local user name
@item @code{host-key-check: SshHostKeyCheck} (optional)
Defines how and what to check the host key against
(default: known_hosts)
@end table

@b{Since:}
2.9

@end deftp



@deftp {Enum} BlkdebugEvent

Trigger events supported by blkdebug.

@b{Values:}
@table @asis
@item @code{l1_shrink_write_table}
write zeros to the l1 table to shrink image.
(since 2.11)
@item @code{l1_shrink_free_l2_clusters}
discard the l2 tables. (since 2.11)
@item @code{cor_write}
a write due to copy-on-read (since 2.11)
@item @code{cluster_alloc_space}
an allocation of file space for a cluster (since 4.1)
@item @code{none}
triggers once at creation of the blkdebug node (since 4.1)
@item @code{l1_update}
Not documented
@item @code{l1_grow_alloc_table}
Not documented
@item @code{l1_grow_write_table}
Not documented
@item @code{l1_grow_activate_table}
Not documented
@item @code{l2_load}
Not documented
@item @code{l2_update}
Not documented
@item @code{l2_update_compressed}
Not documented
@item @code{l2_alloc_cow_read}
Not documented
@item @code{l2_alloc_write}
Not documented
@item @code{read_aio}
Not documented
@item @code{read_backing_aio}
Not documented
@item @code{read_compressed}
Not documented
@item @code{write_aio}
Not documented
@item @code{write_compressed}
Not documented
@item @code{vmstate_load}
Not documented
@item @code{vmstate_save}
Not documented
@item @code{cow_read}
Not documented
@item @code{cow_write}
Not documented
@item @code{reftable_load}
Not documented
@item @code{reftable_grow}
Not documented
@item @code{reftable_update}
Not documented
@item @code{refblock_load}
Not documented
@item @code{refblock_update}
Not documented
@item @code{refblock_update_part}
Not documented
@item @code{refblock_alloc}
Not documented
@item @code{refblock_alloc_hookup}
Not documented
@item @code{refblock_alloc_write}
Not documented
@item @code{refblock_alloc_write_blocks}
Not documented
@item @code{refblock_alloc_write_table}
Not documented
@item @code{refblock_alloc_switch_table}
Not documented
@item @code{cluster_alloc}
Not documented
@item @code{cluster_alloc_bytes}
Not documented
@item @code{cluster_free}
Not documented
@item @code{flush_to_os}
Not documented
@item @code{flush_to_disk}
Not documented
@item @code{pwritev_rmw_head}
Not documented
@item @code{pwritev_rmw_after_head}
Not documented
@item @code{pwritev_rmw_tail}
Not documented
@item @code{pwritev_rmw_after_tail}
Not documented
@item @code{pwritev}
Not documented
@item @code{pwritev_zero}
Not documented
@item @code{pwritev_done}
Not documented
@item @code{empty_image_prepare}
Not documented
@end table

@b{Since:}
2.9

@end deftp



@deftp {Enum} BlkdebugIOType

Kinds of I/O that blkdebug can inject errors in.

@b{Values:}
@table @asis
@item @code{read}
.bdrv_co_preadv()
@item @code{write}
.bdrv_co_pwritev()
@item @code{write-zeroes}
.bdrv_co_pwrite_zeroes()
@item @code{discard}
.bdrv_co_pdiscard()
@item @code{flush}
.bdrv_co_flush_to_disk()
@item @code{block-status}
.bdrv_co_block_status()
@end table

@b{Since:}
4.1

@end deftp



@deftp {Object} BlkdebugInjectErrorOptions

Describes a single error injection for blkdebug.

@b{Members:}
@table @asis
@item @code{event: BlkdebugEvent}
trigger event
@item @code{state: int} (optional)
the state identifier blkdebug needs to be in to
actually trigger the event; defaults to "any"
@item @code{iotype: BlkdebugIOType} (optional)
the type of I/O operations on which this error should
be injected; defaults to "all read, write,
write-zeroes, discard, and flush operations"
(since: 4.1)
@item @code{errno: int} (optional)
error identifier (errno) to be returned; defaults to
EIO
@item @code{sector: int} (optional)
specifies the sector index which has to be affected
in order to actually trigger the event; defaults to "any
sector"
@item @code{once: boolean} (optional)
disables further events after this one has been
triggered; defaults to false
@item @code{immediately: boolean} (optional)
fail immediately; defaults to false
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlkdebugSetStateOptions

Describes a single state-change event for blkdebug.

@b{Members:}
@table @asis
@item @code{event: BlkdebugEvent}
trigger event
@item @code{state: int} (optional)
the current state identifier blkdebug needs to be in;
defaults to "any"
@item @code{new_state: int}
the state identifier blkdebug is supposed to assume if
this event is triggered
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsBlkdebug

Driver specific block device options for blkdebug.

@b{Members:}
@table @asis
@item @code{image: BlockdevRef}
underlying raw block device (or image file)
@item @code{config: string} (optional)
filename of the configuration file
@item @code{align: int} (optional)
required alignment for requests in bytes, must be
positive power of 2, or 0 for default
@item @code{max-transfer: int} (optional)
maximum size for I/O transfers in bytes, must be
positive multiple of @code{align} and of the underlying
file's request alignment (but need not be a power of
2), or 0 for default (since 2.10)
@item @code{opt-write-zero: int} (optional)
preferred alignment for write zero requests in bytes,
must be positive multiple of @code{align} and of the
underlying file's request alignment (but need not be a
power of 2), or 0 for default (since 2.10)
@item @code{max-write-zero: int} (optional)
maximum size for write zero requests in bytes, must be
positive multiple of @code{align}, of @code{opt-write-zero}, and of
the underlying file's request alignment (but need not
be a power of 2), or 0 for default (since 2.10)
@item @code{opt-discard: int} (optional)
preferred alignment for discard requests in bytes, must
be positive multiple of @code{align} and of the underlying
file's request alignment (but need not be a power of
2), or 0 for default (since 2.10)
@item @code{max-discard: int} (optional)
maximum size for discard requests in bytes, must be
positive multiple of @code{align}, of @code{opt-discard}, and of
the underlying file's request alignment (but need not
be a power of 2), or 0 for default (since 2.10)
@item @code{inject-error: array of BlkdebugInjectErrorOptions} (optional)
array of error injection descriptions
@item @code{set-state: array of BlkdebugSetStateOptions} (optional)
array of state-change descriptions
@item @code{take-child-perms: array of BlockPermission} (optional)
Permissions to take on @code{image} in addition to what
is necessary anyway (which depends on how the
blkdebug node is used).  Defaults to none.
(since 5.0)
@item @code{unshare-child-perms: array of BlockPermission} (optional)
Permissions not to share on @code{image} in addition
to what cannot be shared anyway (which depends
on how the blkdebug node is used).  Defaults
to none.  (since 5.0)
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsBlklogwrites

Driver specific block device options for blklogwrites.

@b{Members:}
@table @asis
@item @code{file: BlockdevRef}
block device
@item @code{log: BlockdevRef}
block device used to log writes to @code{file}
@item @code{log-sector-size: int} (optional)
sector size used in logging writes to @code{file}, determines
granularity of offsets and sizes of writes (default: 512)
@item @code{log-append: boolean} (optional)
append to an existing log (default: false)
@item @code{log-super-update-interval: int} (optional)
interval of write requests after which the log
super block is updated to disk (default: 4096)
@end table

@b{Since:}
3.0

@end deftp



@deftp {Object} BlockdevOptionsBlkverify

Driver specific block device options for blkverify.

@b{Members:}
@table @asis
@item @code{test: BlockdevRef}
block device to be tested
@item @code{raw: BlockdevRef}
raw image used for verification
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsBlkreplay

Driver specific block device options for blkreplay.

@b{Members:}
@table @asis
@item @code{image: BlockdevRef}
disk image which should be controlled with blkreplay
@end table

@b{Since:}
4.2

@end deftp



@deftp {Enum} QuorumReadPattern

An enumeration of quorum read patterns.

@b{Values:}
@table @asis
@item @code{quorum}
read all the children and do a quorum vote on reads
@item @code{fifo}
read only from the first child that has not failed
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsQuorum

Driver specific block device options for Quorum

@b{Members:}
@table @asis
@item @code{blkverify: boolean} (optional)
true if the driver must print content mismatch
set to false by default
@item @code{children: array of BlockdevRef}
the children block devices to use
@item @code{vote-threshold: int}
the vote limit under which a read will fail
@item @code{rewrite-corrupted: boolean} (optional)
rewrite corrupted data when quorum is reached
(Since 2.1)
@item @code{read-pattern: QuorumReadPattern} (optional)
choose read pattern and set to quorum by default
(Since 2.2)
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsGluster

Driver specific block device options for Gluster

@b{Members:}
@table @asis
@item @code{volume: string}
name of gluster volume where VM image resides
@item @code{path: string}
absolute path to image file in gluster volume
@item @code{server: array of SocketAddress}
gluster servers description
@item @code{debug: int} (optional)
libgfapi log level (default '4' which is Error)
(Since 2.8)
@item @code{logfile: string} (optional)
libgfapi log file (default /dev/stderr) (Since 2.8)
@end table

@b{Since:}
2.9

@end deftp



@deftp {Enum} IscsiTransport

An enumeration of libiscsi transport types

@b{Values:}
@table @asis
@item @code{tcp}
Not documented
@item @code{iser}
Not documented
@end table

@b{Since:}
2.9

@end deftp



@deftp {Enum} IscsiHeaderDigest

An enumeration of header digests supported by libiscsi

@b{Values:}
@table @asis
@item @code{crc32c}
Not documented
@item @code{none}
Not documented
@item @code{crc32c-none}
Not documented
@item @code{none-crc32c}
Not documented
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsIscsi



@b{Members:}
@table @asis
@item @code{transport: IscsiTransport}
The iscsi transport type
@item @code{portal: string}
The address of the iscsi portal
@item @code{target: string}
The target iqn name
@item @code{lun: int} (optional)
LUN to connect to. Defaults to 0.
@item @code{user: string} (optional)
User name to log in with. If omitted, no CHAP
authentication is performed.
@item @code{password-secret: string} (optional)
The ID of a QCryptoSecret object providing
the password for the login. This option is required if
@code{user} is specified.
@item @code{initiator-name: string} (optional)
The iqn name we want to identify to the target
as. If this option is not specified, an initiator name is
generated automatically.
@item @code{header-digest: IscsiHeaderDigest} (optional)
The desired header digest. Defaults to
none-crc32c.
@item @code{timeout: int} (optional)
Timeout in seconds after which a request will
timeout. 0 means no timeout and is the default.
@end table
Driver specific block device options for iscsi

@b{Since:}
2.9

@end deftp



@deftp {Enum} RbdAuthMode



@b{Values:}
@table @asis
@item @code{cephx}
Not documented
@item @code{none}
Not documented
@end table

@b{Since:}
3.0

@end deftp



@deftp {Object} BlockdevOptionsRbd



@b{Members:}
@table @asis
@item @code{pool: string}
Ceph pool name.
@item @code{namespace: string} (optional)
Rados namespace name in the Ceph pool. (Since 5.0)
@item @code{image: string}
Image name in the Ceph pool.
@item @code{conf: string} (optional)
path to Ceph configuration file.  Values
in the configuration file will be overridden by
options specified via QAPI.
@item @code{snapshot: string} (optional)
Ceph snapshot name.
@item @code{user: string} (optional)
Ceph id name.
@item @code{auth-client-required: array of RbdAuthMode} (optional)
Acceptable authentication modes.
This maps to Ceph configuration option
"auth_client_required".  (Since 3.0)
@item @code{key-secret: string} (optional)
ID of a QCryptoSecret object providing a key
for cephx authentication.
This maps to Ceph configuration option
"key".  (Since 3.0)
@item @code{server: array of InetSocketAddressBase} (optional)
Monitor host address and port.  This maps
to the "mon_host" Ceph option.
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsSheepdog

Driver specific block device options for sheepdog

@b{Members:}
@table @asis
@item @code{vdi: string}
Virtual disk image name
@item @code{server: SocketAddress}
The Sheepdog server to connect to
@item @code{snap-id: int} (optional)
Snapshot ID
@item @code{tag: string} (optional)
Snapshot tag name
@end table
Only one of @code{snap-id} and @code{tag} may be present.

@b{Since:}
2.9

@end deftp



@deftp {Enum} ReplicationMode

An enumeration of replication modes.

@b{Values:}
@table @asis
@item @code{primary}
Primary mode, the vm's state will be sent to secondary QEMU.
@item @code{secondary}
Secondary mode, receive the vm's state from primary QEMU.
@end table

@b{Since:}
2.9

@b{If:} @code{defined(CONFIG_REPLICATION)}
@end deftp



@deftp {Object} BlockdevOptionsReplication

Driver specific block device options for replication

@b{Members:}
@table @asis
@item @code{mode: ReplicationMode}
the replication mode
@item @code{top-id: string} (optional)
In secondary mode, node name or device ID of the root
node who owns the replication node chain. Must not be given in
primary mode.
@item The members of @code{BlockdevOptionsGenericFormat}
@end table

@b{Since:}
2.9

@b{If:} @code{defined(CONFIG_REPLICATION)}
@end deftp



@deftp {Enum} NFSTransport

An enumeration of NFS transport types

@b{Values:}
@table @asis
@item @code{inet}
TCP transport
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} NFSServer

Captures the address of the socket

@b{Members:}
@table @asis
@item @code{type: NFSTransport}
transport type used for NFS (only TCP supported)
@item @code{host: string}
host address for NFS server
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsNfs

Driver specific block device option for NFS

@b{Members:}
@table @asis
@item @code{server: NFSServer}
host address
@item @code{path: string}
path of the image on the host
@item @code{user: int} (optional)
UID value to use when talking to the
server (defaults to 65534 on Windows and getuid()
on unix)
@item @code{group: int} (optional)
GID value to use when talking to the
server (defaults to 65534 on Windows and getgid()
in unix)
@item @code{tcp-syn-count: int} (optional)
number of SYNs during the session
establishment (defaults to libnfs default)
@item @code{readahead-size: int} (optional)
set the readahead size in bytes (defaults
to libnfs default)
@item @code{page-cache-size: int} (optional)
set the pagecache size in bytes (defaults
to libnfs default)
@item @code{debug: int} (optional)
set the NFS debug level (max 2) (defaults
to libnfs default)
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsCurlBase

Driver specific block device options shared by all protocols supported by the
curl backend.

@b{Members:}
@table @asis
@item @code{url: string}
URL of the image file
@item @code{readahead: int} (optional)
Size of the read-ahead cache; must be a multiple of
512 (defaults to 256 kB)
@item @code{timeout: int} (optional)
Timeout for connections, in seconds (defaults to 5)
@item @code{username: string} (optional)
Username for authentication (defaults to none)
@item @code{password-secret: string} (optional)
ID of a QCryptoSecret object providing a password
for authentication (defaults to no password)
@item @code{proxy-username: string} (optional)
Username for proxy authentication (defaults to none)
@item @code{proxy-password-secret: string} (optional)
ID of a QCryptoSecret object providing a password
for proxy authentication (defaults to no password)
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsCurlHttp

Driver specific block device options for HTTP connections over the curl
backend.  URLs must start with "http://".

@b{Members:}
@table @asis
@item @code{cookie: string} (optional)
List of cookies to set; format is
"name1=content1; name2=content2;" as explained by
CURLOPT_COOKIE(3). Defaults to no cookies.
@item @code{cookie-secret: string} (optional)
ID of a QCryptoSecret object providing the cookie data in a
secure way. See @code{cookie} for the format. (since 2.10)
@item The members of @code{BlockdevOptionsCurlBase}
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsCurlHttps

Driver specific block device options for HTTPS connections over the curl
backend.  URLs must start with "https://".

@b{Members:}
@table @asis
@item @code{cookie: string} (optional)
List of cookies to set; format is
"name1=content1; name2=content2;" as explained by
CURLOPT_COOKIE(3). Defaults to no cookies.
@item @code{sslverify: boolean} (optional)
Whether to verify the SSL certificate's validity (defaults to
true)
@item @code{cookie-secret: string} (optional)
ID of a QCryptoSecret object providing the cookie data in a
secure way. See @code{cookie} for the format. (since 2.10)
@item The members of @code{BlockdevOptionsCurlBase}
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsCurlFtp

Driver specific block device options for FTP connections over the curl
backend.  URLs must start with "ftp://".

@b{Members:}
@table @asis
@item The members of @code{BlockdevOptionsCurlBase}
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsCurlFtps

Driver specific block device options for FTPS connections over the curl
backend.  URLs must start with "ftps://".

@b{Members:}
@table @asis
@item @code{sslverify: boolean} (optional)
Whether to verify the SSL certificate's validity (defaults to
true)
@item The members of @code{BlockdevOptionsCurlBase}
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsNbd

Driver specific block device options for NBD.

@b{Members:}
@table @asis
@item @code{server: SocketAddress}
NBD server address
@item @code{export: string} (optional)
export name
@item @code{tls-creds: string} (optional)
TLS credentials ID
@item @code{x-dirty-bitmap: string} (optional)
A "qemu:dirty-bitmap:NAME" string to query in place of
traditional "base:allocation" block status (see
NBD_OPT_LIST_META_CONTEXT in the NBD protocol) (since 3.0)
@item @code{reconnect-delay: int} (optional)
On an unexpected disconnect, the nbd client tries to
connect again until succeeding or encountering a serious
error.  During the first @code{reconnect-delay} seconds, all
requests are paused and will be rerun on a successful
reconnect. After that time, any delayed requests and all
future requests before a successful reconnect will
immediately fail. Default 0 (Since 4.2)
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsRaw

Driver specific block device options for the raw driver.

@b{Members:}
@table @asis
@item @code{offset: int} (optional)
position where the block device starts
@item @code{size: int} (optional)
the assumed size of the device
@item The members of @code{BlockdevOptionsGenericFormat}
@end table

@b{Since:}
2.9

@end deftp



@deftp {Object} BlockdevOptionsVxHS

Driver specific block device options for VxHS

@b{Members:}
@table @asis
@item @code{vdisk-id: string}
UUID of VxHS volume
@item @code{server: InetSocketAddressBase}
vxhs server IP, port
@item @code{tls-creds: string} (optional)
TLS credentials ID
@end table

@b{Since:}
2.10

@end deftp



@deftp {Object} BlockdevOptionsThrottle

Driver specific block device options for the throttle driver

@b{Members:}
@table @asis
@item @code{throttle-group: string}
the name of the throttle-group object to use. It
must already exist.
@item @code{file: BlockdevRef}
reference to or definition of the data source block device
@end table

@b{Since:}
2.11

@end deftp



@deftp {Object} BlockdevOptions

Options for creating a block device.  Many options are available for all
block devices, independent of the block driver:

@b{Members:}
@table @asis
@item @code{driver: BlockdevDriver}
block driver name
@item @code{node-name: string} (optional)
the node name of the new node (Since 2.0).
This option is required on the top level of blockdev-add.
Valid node names start with an alphabetic character and may
contain only alphanumeric characters, '-', '.' and '_'. Their
maximum length is 31 characters.
@item @code{discard: BlockdevDiscardOptions} (optional)
discard-related options (default: ignore)
@item @code{cache: BlockdevCacheOptions} (optional)
cache-related options
@item @code{read-only: boolean} (optional)
whether the block device should be read-only (default: false).
Note that some block drivers support only read-only access,
either generally or in certain configurations. In this case,
the default value does not work and the option must be
specified explicitly.
@item @code{auto-read-only: boolean} (optional)
if true and @code{read-only} is false, QEMU may automatically
decide not to open the image read-write as requested, but
fall back to read-only instead (and switch between the modes
later), e.g. depending on whether the image file is writable
or whether a writing user is attached to the node
(default: false, since 3.1)
@item @code{detect-zeroes: BlockdevDetectZeroesOptions} (optional)
detect and optimize zero writes (Since 2.1)
(default: off)
@item @code{force-share: boolean} (optional)
force share all permission on added nodes.
Requires read-only=true. (Since 2.10)
@item The members of @code{BlockdevOptionsBlkdebug} when @code{driver} is @t{"blkdebug"}
@item The members of @code{BlockdevOptionsBlklogwrites} when @code{driver} is @t{"blklogwrites"}
@item The members of @code{BlockdevOptionsBlkverify} when @code{driver} is @t{"blkverify"}
@item The members of @code{BlockdevOptionsBlkreplay} when @code{driver} is @t{"blkreplay"}
@item The members of @code{BlockdevOptionsGenericFormat} when @code{driver} is @t{"bochs"}
@item The members of @code{BlockdevOptionsGenericFormat} when @code{driver} is @t{"cloop"}
@item The members of @code{BlockdevOptionsGenericFormat} when @code{driver} is @t{"compress"}
@item The members of @code{BlockdevOptionsGenericFormat} when @code{driver} is @t{"copy-on-read"}
@item The members of @code{BlockdevOptionsGenericFormat} when @code{driver} is @t{"dmg"}
@item The members of @code{BlockdevOptionsFile} when @code{driver} is @t{"file"}
@item The members of @code{BlockdevOptionsCurlFtp} when @code{driver} is @t{"ftp"}
@item The members of @code{BlockdevOptionsCurlFtps} when @code{driver} is @t{"ftps"}
@item The members of @code{BlockdevOptionsGluster} when @code{driver} is @t{"gluster"}
@item The members of @code{BlockdevOptionsFile} when @code{driver} is @t{"host_cdrom"}
@item The members of @code{BlockdevOptionsFile} when @code{driver} is @t{"host_device"}
@item The members of @code{BlockdevOptionsCurlHttp} when @code{driver} is @t{"http"}
@item The members of @code{BlockdevOptionsCurlHttps} when @code{driver} is @t{"https"}
@item The members of @code{BlockdevOptionsIscsi} when @code{driver} is @t{"iscsi"}
@item The members of @code{BlockdevOptionsLUKS} when @code{driver} is @t{"luks"}
@item The members of @code{BlockdevOptionsNbd} when @code{driver} is @t{"nbd"}
@item The members of @code{BlockdevOptionsNfs} when @code{driver} is @t{"nfs"}
@item The members of @code{BlockdevOptionsNull} when @code{driver} is @t{"null-aio"}
@item The members of @code{BlockdevOptionsNull} when @code{driver} is @t{"null-co"}
@item The members of @code{BlockdevOptionsNVMe} when @code{driver} is @t{"nvme"}
@item The members of @code{BlockdevOptionsGenericFormat} when @code{driver} is @t{"parallels"}
@item The members of @code{BlockdevOptionsQcow2} when @code{driver} is @t{"qcow2"}
@item The members of @code{BlockdevOptionsQcow} when @code{driver} is @t{"qcow"}
@item The members of @code{BlockdevOptionsGenericCOWFormat} when @code{driver} is @t{"qed"}
@item The members of @code{BlockdevOptionsQuorum} when @code{driver} is @t{"quorum"}
@item The members of @code{BlockdevOptionsRaw} when @code{driver} is @t{"raw"}
@item The members of @code{BlockdevOptionsRbd} when @code{driver} is @t{"rbd"}
@item The members of @code{BlockdevOptionsReplication} when @code{driver} is @t{"replication"} (@b{If:} @code{defined(CONFIG_REPLICATION)})
@item The members of @code{BlockdevOptionsSheepdog} when @code{driver} is @t{"sheepdog"}
@item The members of @code{BlockdevOptionsSsh} when @code{driver} is @t{"ssh"}
@item The members of @code{BlockdevOptionsThrottle} when @code{driver} is @t{"throttle"}
@item The members of @code{BlockdevOptionsGenericFormat} when @code{driver} is @t{"vdi"}
@item The members of @code{BlockdevOptionsGenericFormat} when @code{driver} is @t{"vhdx"}
@item The members of @code{BlockdevOptionsGenericCOWFormat} when @code{driver} is @t{"vmdk"}
@item The members of @code{BlockdevOptionsGenericFormat} when @code{driver} is @t{"vpc"}
@item The members of @code{BlockdevOptionsVVFAT} when @code{driver} is @t{"vvfat"}
@item The members of @code{BlockdevOptionsVxHS} when @code{driver} is @t{"vxhs"}
@end table
Remaining options are determined by the block driver.

@b{Since:}
2.9

@end deftp



@deftp {Alternate} BlockdevRef

Reference to a block device.

@b{Members:}
@table @asis
@item @code{definition: BlockdevOptions}
defines a new block device inline
@item @code{reference: string}
references the ID of an existing block device
@end table

@b{Since:}
2.9

@end deftp



@deftp {Alternate} BlockdevRefOrNull

Reference to a block device.

@b{Members:}
@table @asis
@item @code{definition: BlockdevOptions}
defines a new block device inline
@item @code{reference: string}
references the ID of an existing block device.
An empty string means that no block device should
be referenced.  Deprecated; use null instead.
@item @code{null: null}
No block device should be referenced (since 2.10)
@end table

@b{Since:}
2.9

@end deftp



@deftypefn Command {} blockdev-add

Creates a new block device. If the @code{id} option is given at the top level, a
BlockBackend will be created; otherwise, @code{node-name} is mandatory at the top
level and no BlockBackend will be created.

@b{Arguments:} the members of @code{BlockdevOptions}

@b{Since:}
2.9

@b{Example:}
@example
1.
-> @{ "execute": "blockdev-add",
     "arguments": @{
          "driver": "qcow2",
          "node-name": "test1",
          "file": @{
              "driver": "file",
              "filename": "test.qcow2"
           @}
      @}
    @}
<- @{ "return": @{@} @}

2.
-> @{ "execute": "blockdev-add",
     "arguments": @{
          "driver": "qcow2",
          "node-name": "node0",
          "discard": "unmap",
          "cache": @{
             "direct": true
           @},
           "file": @{
             "driver": "file",
             "filename": "/tmp/test.qcow2"
           @},
           "backing": @{
              "driver": "raw",
              "file": @{
                 "driver": "file",
                 "filename": "/dev/fdset/4"
               @}
           @}
       @}
     @}

<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftypefn Command {} x-blockdev-reopen

Reopens a block device using the given set of options. Any option
not specified will be reset to its default value regardless of its
previous status. If an option cannot be changed or a particular
driver does not support reopening then the command will return an
error.

The top-level @code{node-name} option (from BlockdevOptions) must be
specified and is used to select the block device to be reopened.
Other @code{node-name} options must be either omitted or set to the
current name of the appropriate node. This command won't change any
node name and any attempt to do it will result in an error.

In the case of options that refer to child nodes, the behavior of
this command depends on the value:

1) A set of options (BlockdevOptions): the child is reopened with
the specified set of options.

2) A reference to the current child: the child is reopened using
its existing set of options.

3) A reference to a different node: the current child is replaced
with the specified one.

4) NULL: the current child (if any) is detached.

Options (1) and (2) are supported in all cases, but at the moment
only @code{backing} allows replacing or detaching an existing child.

Unlike with blockdev-add, the @code{backing} option must always be present
unless the node being reopened does not have a backing file and its
image does not have a default backing file name as part of its
metadata.

@b{Arguments:} the members of @code{BlockdevOptions}

@b{Since:}
4.0

@end deftypefn



@deftypefn Command {} blockdev-del

Deletes a block device that has been added using blockdev-add.
The command will fail if the node is attached to a device or is
otherwise being used.

@b{Arguments:}
@table @asis
@item @code{node-name: string}
Name of the graph node to delete.
@end table

@b{Since:}
2.9

@b{Example:}
@example
-> @{ "execute": "blockdev-add",
     "arguments": @{
          "driver": "qcow2",
          "node-name": "node0",
          "file": @{
              "driver": "file",
              "filename": "test.qcow2"
          @}
     @}
   @}
<- @{ "return": @{@} @}

-> @{ "execute": "blockdev-del",
     "arguments": @{ "node-name": "node0" @}
   @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftp {Object} BlockdevCreateOptionsFile

Driver specific image creation options for file.

@b{Members:}
@table @asis
@item @code{filename: string}
Filename for the new image file
@item @code{size: int}
Size of the virtual disk in bytes
@item @code{preallocation: PreallocMode} (optional)
Preallocation mode for the new image (default: off;
allowed values: off,
falloc (if defined CONFIG_POSIX_FALLOCATE),
full (if defined CONFIG_POSIX))
@item @code{nocow: boolean} (optional)
Turn off copy-on-write (valid only on btrfs; default: off)
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} BlockdevCreateOptionsGluster

Driver specific image creation options for gluster.

@b{Members:}
@table @asis
@item @code{location: BlockdevOptionsGluster}
Where to store the new image file
@item @code{size: int}
Size of the virtual disk in bytes
@item @code{preallocation: PreallocMode} (optional)
Preallocation mode for the new image (default: off;
allowed values: off,
falloc (if defined CONFIG_GLUSTERFS_FALLOCATE),
full (if defined CONFIG_GLUSTERFS_ZEROFILL))
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} BlockdevCreateOptionsLUKS

Driver specific image creation options for LUKS.

@b{Members:}
@table @asis
@item @code{file: BlockdevRef}
Node to create the image format on
@item @code{size: int}
Size of the virtual disk in bytes
@item @code{preallocation: PreallocMode} (optional)
Preallocation mode for the new image
(since: 4.2)
(default: off; allowed values: off, metadata, falloc, full)
@item The members of @code{QCryptoBlockCreateOptionsLUKS}
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} BlockdevCreateOptionsNfs

Driver specific image creation options for NFS.

@b{Members:}
@table @asis
@item @code{location: BlockdevOptionsNfs}
Where to store the new image file
@item @code{size: int}
Size of the virtual disk in bytes
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} BlockdevCreateOptionsParallels

Driver specific image creation options for parallels.

@b{Members:}
@table @asis
@item @code{file: BlockdevRef}
Node to create the image format on
@item @code{size: int}
Size of the virtual disk in bytes
@item @code{cluster-size: int} (optional)
Cluster size in bytes (default: 1 MB)
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} BlockdevCreateOptionsQcow

Driver specific image creation options for qcow.

@b{Members:}
@table @asis
@item @code{file: BlockdevRef}
Node to create the image format on
@item @code{size: int}
Size of the virtual disk in bytes
@item @code{backing-file: string} (optional)
File name of the backing file if a backing file
should be used
@item @code{encrypt: QCryptoBlockCreateOptions} (optional)
Encryption options if the image should be encrypted
@end table

@b{Since:}
2.12

@end deftp



@deftp {Enum} BlockdevQcow2Version



@b{Values:}
@table @asis
@item @code{v2}
The original QCOW2 format as introduced in qemu 0.10 (version 2)
@item @code{v3}
The extended QCOW2 format as introduced in qemu 1.1 (version 3)
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} BlockdevCreateOptionsQcow2

Driver specific image creation options for qcow2.

@b{Members:}
@table @asis
@item @code{file: BlockdevRef}
Node to create the image format on
@item @code{data-file: BlockdevRef} (optional)
Node to use as an external data file in which all guest
data is stored so that only metadata remains in the qcow2
file (since: 4.0)
@item @code{data-file-raw: boolean} (optional)
True if the external data file must stay valid as a
standalone (read-only) raw image without looking at qcow2
metadata (default: false; since: 4.0)
@item @code{size: int}
Size of the virtual disk in bytes
@item @code{version: BlockdevQcow2Version} (optional)
Compatibility level (default: v3)
@item @code{backing-file: string} (optional)
File name of the backing file if a backing file
should be used
@item @code{backing-fmt: BlockdevDriver} (optional)
Name of the block driver to use for the backing file
@item @code{encrypt: QCryptoBlockCreateOptions} (optional)
Encryption options if the image should be encrypted
@item @code{cluster-size: int} (optional)
qcow2 cluster size in bytes (default: 65536)
@item @code{preallocation: PreallocMode} (optional)
Preallocation mode for the new image (default: off;
allowed values: off, falloc, full, metadata)
@item @code{lazy-refcounts: boolean} (optional)
True if refcounts may be updated lazily (default: off)
@item @code{refcount-bits: int} (optional)
Width of reference counts in bits (default: 16)
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} BlockdevCreateOptionsQed

Driver specific image creation options for qed.

@b{Members:}
@table @asis
@item @code{file: BlockdevRef}
Node to create the image format on
@item @code{size: int}
Size of the virtual disk in bytes
@item @code{backing-file: string} (optional)
File name of the backing file if a backing file
should be used
@item @code{backing-fmt: BlockdevDriver} (optional)
Name of the block driver to use for the backing file
@item @code{cluster-size: int} (optional)
Cluster size in bytes (default: 65536)
@item @code{table-size: int} (optional)
L1/L2 table size (in clusters)
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} BlockdevCreateOptionsRbd

Driver specific image creation options for rbd/Ceph.

@b{Members:}
@table @asis
@item @code{location: BlockdevOptionsRbd}
Where to store the new image file. This location cannot
point to a snapshot.
@item @code{size: int}
Size of the virtual disk in bytes
@item @code{cluster-size: int} (optional)
RBD object size
@end table

@b{Since:}
2.12

@end deftp



@deftp {Enum} BlockdevVmdkSubformat

Subformat options for VMDK images

@b{Values:}
@table @asis
@item @code{monolithicSparse}
Single file image with sparse cluster allocation
@item @code{monolithicFlat}
Single flat data image and a descriptor file
@item @code{twoGbMaxExtentSparse}
Data is split into 2GB (per virtual LBA) sparse extent
files, in addition to a descriptor file
@item @code{twoGbMaxExtentFlat}
Data is split into 2GB (per virtual LBA) flat extent
files, in addition to a descriptor file
@item @code{streamOptimized}
Single file image sparse cluster allocation, optimized
for streaming over network.
@end table

@b{Since:}
4.0

@end deftp



@deftp {Enum} BlockdevVmdkAdapterType

Adapter type info for VMDK images

@b{Values:}
@table @asis
@item @code{ide}
Not documented
@item @code{buslogic}
Not documented
@item @code{lsilogic}
Not documented
@item @code{legacyESX}
Not documented
@end table

@b{Since:}
4.0

@end deftp



@deftp {Object} BlockdevCreateOptionsVmdk

Driver specific image creation options for VMDK.

@b{Members:}
@table @asis
@item @code{file: BlockdevRef}
Where to store the new image file. This refers to the image
file for monolithcSparse and streamOptimized format, or the
descriptor file for other formats.
@item @code{size: int}
Size of the virtual disk in bytes
@item @code{extents: array of BlockdevRef} (optional)
Where to store the data extents. Required for monolithcFlat,
twoGbMaxExtentSparse and twoGbMaxExtentFlat formats. For
monolithicFlat, only one entry is required; for
twoGbMaxExtent* formats, the number of entries required is
calculated as extent_number = virtual_size / 2GB. Providing
more extents than will be used is an error.
@item @code{subformat: BlockdevVmdkSubformat} (optional)
The subformat of the VMDK image. Default: "monolithicSparse".
@item @code{backing-file: string} (optional)
The path of backing file. Default: no backing file is used.
@item @code{adapter-type: BlockdevVmdkAdapterType} (optional)
The adapter type used to fill in the descriptor. Default: ide.
@item @code{hwversion: string} (optional)
Hardware version. The meaningful options are "4" or "6".
Default: "4".
@item @code{zeroed-grain: boolean} (optional)
Whether to enable zeroed-grain feature for sparse subformats.
Default: false.
@end table

@b{Since:}
4.0

@end deftp



@deftp {Enum} SheepdogRedundancyType



@b{Values:}
@table @asis
@item @code{full}
Create a fully replicated vdi with x copies
@item @code{erasure-coded}
Create an erasure coded vdi with x data strips and
y parity strips
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} SheepdogRedundancyFull



@b{Members:}
@table @asis
@item @code{copies: int}
Number of copies to use (between 1 and 31)
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} SheepdogRedundancyErasureCoded



@b{Members:}
@table @asis
@item @code{data-strips: int}
Number of data strips to use (one of @{2,4,8,16@})
@item @code{parity-strips: int}
Number of parity strips to use (between 1 and 15)
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} SheepdogRedundancy



@b{Members:}
@table @asis
@item @code{type: SheepdogRedundancyType}
Not documented
@item The members of @code{SheepdogRedundancyFull} when @code{type} is @t{"full"}
@item The members of @code{SheepdogRedundancyErasureCoded} when @code{type} is @t{"erasure-coded"}
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} BlockdevCreateOptionsSheepdog

Driver specific image creation options for Sheepdog.

@b{Members:}
@table @asis
@item @code{location: BlockdevOptionsSheepdog}
Where to store the new image file
@item @code{size: int}
Size of the virtual disk in bytes
@item @code{backing-file: string} (optional)
File name of a base image
@item @code{preallocation: PreallocMode} (optional)
Preallocation mode for the new image (default: off;
allowed values: off, full)
@item @code{redundancy: SheepdogRedundancy} (optional)
Redundancy of the image
@item @code{object-size: int} (optional)
Object size of the image
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} BlockdevCreateOptionsSsh

Driver specific image creation options for SSH.

@b{Members:}
@table @asis
@item @code{location: BlockdevOptionsSsh}
Where to store the new image file
@item @code{size: int}
Size of the virtual disk in bytes
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} BlockdevCreateOptionsVdi

Driver specific image creation options for VDI.

@b{Members:}
@table @asis
@item @code{file: BlockdevRef}
Node to create the image format on
@item @code{size: int}
Size of the virtual disk in bytes
@item @code{preallocation: PreallocMode} (optional)
Preallocation mode for the new image (default: off;
allowed values: off, metadata)
@end table

@b{Since:}
2.12

@end deftp



@deftp {Enum} BlockdevVhdxSubformat



@b{Values:}
@table @asis
@item @code{dynamic}
Growing image file
@item @code{fixed}
Preallocated fixed-size image file
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} BlockdevCreateOptionsVhdx

Driver specific image creation options for vhdx.

@b{Members:}
@table @asis
@item @code{file: BlockdevRef}
Node to create the image format on
@item @code{size: int}
Size of the virtual disk in bytes
@item @code{log-size: int} (optional)
Log size in bytes, must be a multiple of 1 MB
(default: 1 MB)
@item @code{block-size: int} (optional)
Block size in bytes, must be a multiple of 1 MB and not
larger than 256 MB (default: automatically choose a block
size depending on the image size)
@item @code{subformat: BlockdevVhdxSubformat} (optional)
vhdx subformat (default: dynamic)
@item @code{block-state-zero: boolean} (optional)
Force use of payload blocks of type 'ZERO'. Non-standard,
but default.  Do not set to 'off' when using 'qemu-img
convert' with subformat=dynamic.
@end table

@b{Since:}
2.12

@end deftp



@deftp {Enum} BlockdevVpcSubformat



@b{Values:}
@table @asis
@item @code{dynamic}
Growing image file
@item @code{fixed}
Preallocated fixed-size image file
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} BlockdevCreateOptionsVpc

Driver specific image creation options for vpc (VHD).

@b{Members:}
@table @asis
@item @code{file: BlockdevRef}
Node to create the image format on
@item @code{size: int}
Size of the virtual disk in bytes
@item @code{subformat: BlockdevVpcSubformat} (optional)
vhdx subformat (default: dynamic)
@item @code{force-size: boolean} (optional)
Force use of the exact byte size instead of rounding to the
next size that can be represented in CHS geometry
(default: false)
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} BlockdevCreateOptions

Options for creating an image format on a given node.

@b{Members:}
@table @asis
@item @code{driver: BlockdevDriver}
block driver to create the image format
@item The members of @code{BlockdevCreateOptionsFile} when @code{driver} is @t{"file"}
@item The members of @code{BlockdevCreateOptionsGluster} when @code{driver} is @t{"gluster"}
@item The members of @code{BlockdevCreateOptionsLUKS} when @code{driver} is @t{"luks"}
@item The members of @code{BlockdevCreateOptionsNfs} when @code{driver} is @t{"nfs"}
@item The members of @code{BlockdevCreateOptionsParallels} when @code{driver} is @t{"parallels"}
@item The members of @code{BlockdevCreateOptionsQcow} when @code{driver} is @t{"qcow"}
@item The members of @code{BlockdevCreateOptionsQcow2} when @code{driver} is @t{"qcow2"}
@item The members of @code{BlockdevCreateOptionsQed} when @code{driver} is @t{"qed"}
@item The members of @code{BlockdevCreateOptionsRbd} when @code{driver} is @t{"rbd"}
@item The members of @code{BlockdevCreateOptionsSheepdog} when @code{driver} is @t{"sheepdog"}
@item The members of @code{BlockdevCreateOptionsSsh} when @code{driver} is @t{"ssh"}
@item The members of @code{BlockdevCreateOptionsVdi} when @code{driver} is @t{"vdi"}
@item The members of @code{BlockdevCreateOptionsVhdx} when @code{driver} is @t{"vhdx"}
@item The members of @code{BlockdevCreateOptionsVmdk} when @code{driver} is @t{"vmdk"}
@item The members of @code{BlockdevCreateOptionsVpc} when @code{driver} is @t{"vpc"}
@end table

@b{Since:}
2.12

@end deftp



@deftypefn Command {} blockdev-create

Starts a job to create an image format on a given node. The job is
automatically finalized, but a manual job-dismiss is required.

@b{Arguments:}
@table @asis
@item @code{job-id: string}
Identifier for the newly created job.
@item @code{options: BlockdevCreateOptions}
Options for the image creation.
@end table

@b{Since:}
3.0

@end deftypefn



@deftp {Enum} BlockErrorAction

An enumeration of action that has been taken when a DISK I/O occurs

@b{Values:}
@table @asis
@item @code{ignore}
error has been ignored
@item @code{report}
error has been reported to the device
@item @code{stop}
error caused VM to be stopped
@end table

@b{Since:}
2.1

@end deftp



@deftypefn Event {} BLOCK_IMAGE_CORRUPTED

Emitted when a disk image is being marked corrupt. The image can be
identified by its device or node name. The 'device' field is always
present for compatibility reasons, but it can be empty ("") if the
image does not have a device name associated.

@b{Arguments:}
@table @asis
@item @code{device: string}
device name. This is always present for compatibility
reasons, but it can be empty ("") if the image does not
have a device name associated.
@item @code{node-name: string} (optional)
node name (Since: 2.4)
@item @code{msg: string}
informative message for human consumption, such as the kind of
corruption being detected. It should not be parsed by machine as it is
not guaranteed to be stable
@item @code{offset: int} (optional)
if the corruption resulted from an image access, this is
the host's access offset into the image
@item @code{size: int} (optional)
if the corruption resulted from an image access, this is
the access size
@item @code{fatal: boolean}
if set, the image is marked corrupt and therefore unusable after this
event and must be repaired (Since 2.2; before, every
BLOCK_IMAGE_CORRUPTED event was fatal)
@end table

@b{Note:}
If action is "stop", a STOP event will eventually follow the
BLOCK_IO_ERROR event.

@b{Example:}
@example
<- @{ "event": "BLOCK_IMAGE_CORRUPTED",
     "data": @{ "device": "ide0-hd0", "node-name": "node0",
               "msg": "Prevented active L1 table overwrite", "offset": 196608,
               "size": 65536 @},
     "timestamp": @{ "seconds": 1378126126, "microseconds": 966463 @} @}
@end example

@b{Since:}
1.7

@end deftypefn



@deftypefn Event {} BLOCK_IO_ERROR

Emitted when a disk I/O error occurs

@b{Arguments:}
@table @asis
@item @code{device: string}
device name. This is always present for compatibility
reasons, but it can be empty ("") if the image does not
have a device name associated.
@item @code{node-name: string} (optional)
node name. Note that errors may be reported for the root node
that is directly attached to a guest device rather than for the
node where the error occurred. The node name is not present if
the drive is empty. (Since: 2.8)
@item @code{operation: IoOperationType}
I/O operation
@item @code{action: BlockErrorAction}
action that has been taken
@item @code{nospace: boolean} (optional)
true if I/O error was caused due to a no-space
condition. This key is only present if query-block's
io-status is present, please see query-block documentation
for more information (since: 2.2)
@item @code{reason: string}
human readable string describing the error cause.
(This field is a debugging aid for humans, it should not
be parsed by applications) (since: 2.2)
@end table

@b{Note:}
If action is "stop", a STOP event will eventually follow the
BLOCK_IO_ERROR event

@b{Since:}
0.13.0

@b{Example:}
@example
<- @{ "event": "BLOCK_IO_ERROR",
     "data": @{ "device": "ide0-hd1",
               "node-name": "#block212",
               "operation": "write",
               "action": "stop" @},
     "timestamp": @{ "seconds": 1265044230, "microseconds": 450486 @} @}
@end example

@end deftypefn



@deftypefn Event {} BLOCK_JOB_COMPLETED

Emitted when a block job has completed

@b{Arguments:}
@table @asis
@item @code{type: JobType}
job type
@item @code{device: string}
The job identifier. Originally the device name but other
values are allowed since QEMU 2.7
@item @code{len: int}
maximum progress value
@item @code{offset: int}
current progress value. On success this is equal to len.
On failure this is less than len
@item @code{speed: int}
rate limit, bytes per second
@item @code{error: string} (optional)
error message. Only present on failure. This field
contains a human-readable error message. There are no semantics
other than that streaming has failed and clients should not try to
interpret the error string
@end table

@b{Since:}
1.1

@b{Example:}
@example
<- @{ "event": "BLOCK_JOB_COMPLETED",
     "data": @{ "type": "stream", "device": "virtio-disk0",
               "len": 10737418240, "offset": 10737418240,
               "speed": 0 @},
     "timestamp": @{ "seconds": 1267061043, "microseconds": 959568 @} @}
@end example

@end deftypefn



@deftypefn Event {} BLOCK_JOB_CANCELLED

Emitted when a block job has been cancelled

@b{Arguments:}
@table @asis
@item @code{type: JobType}
job type
@item @code{device: string}
The job identifier. Originally the device name but other
values are allowed since QEMU 2.7
@item @code{len: int}
maximum progress value
@item @code{offset: int}
current progress value. On success this is equal to len.
On failure this is less than len
@item @code{speed: int}
rate limit, bytes per second
@end table

@b{Since:}
1.1

@b{Example:}
@example
<- @{ "event": "BLOCK_JOB_CANCELLED",
     "data": @{ "type": "stream", "device": "virtio-disk0",
               "len": 10737418240, "offset": 134217728,
               "speed": 0 @},
     "timestamp": @{ "seconds": 1267061043, "microseconds": 959568 @} @}
@end example

@end deftypefn



@deftypefn Event {} BLOCK_JOB_ERROR

Emitted when a block job encounters an error

@b{Arguments:}
@table @asis
@item @code{device: string}
The job identifier. Originally the device name but other
values are allowed since QEMU 2.7
@item @code{operation: IoOperationType}
I/O operation
@item @code{action: BlockErrorAction}
action that has been taken
@end table

@b{Since:}
1.3

@b{Example:}
@example
<- @{ "event": "BLOCK_JOB_ERROR",
     "data": @{ "device": "ide0-hd1",
               "operation": "write",
               "action": "stop" @},
     "timestamp": @{ "seconds": 1265044230, "microseconds": 450486 @} @}
@end example

@end deftypefn



@deftypefn Event {} BLOCK_JOB_READY

Emitted when a block job is ready to complete

@b{Arguments:}
@table @asis
@item @code{type: JobType}
job type
@item @code{device: string}
The job identifier. Originally the device name but other
values are allowed since QEMU 2.7
@item @code{len: int}
maximum progress value
@item @code{offset: int}
current progress value. On success this is equal to len.
On failure this is less than len
@item @code{speed: int}
rate limit, bytes per second
@end table

@b{Note:}
The "ready to complete" status is always reset by a @code{BLOCK_JOB_ERROR}
event

@b{Since:}
1.3

@b{Example:}
@example
<- @{ "event": "BLOCK_JOB_READY",
     "data": @{ "device": "drive0", "type": "mirror", "speed": 0,
               "len": 2097152, "offset": 2097152 @}
     "timestamp": @{ "seconds": 1265044230, "microseconds": 450486 @} @}
@end example

@end deftypefn



@deftypefn Event {} BLOCK_JOB_PENDING

Emitted when a block job is awaiting explicit authorization to finalize graph
changes via @code{block-job-finalize}. If this job is part of a transaction, it will
not emit this event until the transaction has converged first.

@b{Arguments:}
@table @asis
@item @code{type: JobType}
job type
@item @code{id: string}
The job identifier.
@end table

@b{Since:}
2.12

@b{Example:}
@example
<- @{ "event": "BLOCK_JOB_WAITING",
     "data": @{ "device": "drive0", "type": "mirror" @},
     "timestamp": @{ "seconds": 1265044230, "microseconds": 450486 @} @}
@end example

@end deftypefn



@deftp {Enum} PreallocMode

Preallocation mode of QEMU image file

@b{Values:}
@table @asis
@item @code{off}
no preallocation
@item @code{metadata}
preallocate only for metadata
@item @code{falloc}
like @code{full} preallocation but allocate disk space by
posix_fallocate() rather than writing data.
@item @code{full}
preallocate all data by writing it to the device to ensure
disk space is really available. This data may or may not be
zero, depending on the image format and storage.
@code{full} preallocation also sets up metadata correctly.
@end table

@b{Since:}
2.2

@end deftp



@deftypefn Event {} BLOCK_WRITE_THRESHOLD

Emitted when writes on block device reaches or exceeds the
configured write threshold. For thin-provisioned devices, this
means the device should be extended to avoid pausing for
disk exhaustion.
The event is one shot. Once triggered, it needs to be
re-registered with another block-set-write-threshold command.

@b{Arguments:}
@table @asis
@item @code{node-name: string}
graph node name on which the threshold was exceeded.
@item @code{amount-exceeded: int}
amount of data which exceeded the threshold, in bytes.
@item @code{write-threshold: int}
last configured threshold, in bytes.
@end table

@b{Since:}
2.3

@end deftypefn



@deftypefn Command {} block-set-write-threshold

Change the write threshold for a block drive. An event will be
delivered if a write to this block drive crosses the configured
threshold.  The threshold is an offset, thus must be
non-negative. Default is no write threshold. Setting the threshold
to zero disables it.

This is useful to transparently resize thin-provisioned drives without
the guest OS noticing.

@b{Arguments:}
@table @asis
@item @code{node-name: string}
graph node name on which the threshold must be set.
@item @code{write-threshold: int}
configured threshold for the block device, bytes.
Use 0 to disable the threshold.
@end table

@b{Since:}
2.3

@b{Example:}
@example
-> @{ "execute": "block-set-write-threshold",
     "arguments": @{ "node-name": "mydev",
                    "write-threshold": 17179869184 @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftypefn Command {} x-blockdev-change

Dynamically reconfigure the block driver state graph. It can be used
to add, remove, insert or replace a graph node. Currently only the
Quorum driver implements this feature to add or remove its child. This
is useful to fix a broken quorum child.

If @code{node} is specified, it will be inserted under @code{parent}. @code{child}
may not be specified in this case. If both @code{parent} and @code{child} are
specified but @code{node} is not, @code{child} will be detached from @code{parent}.

@b{Arguments:}
@table @asis
@item @code{parent: string}
the id or name of the parent node.
@item @code{child: string} (optional)
the name of a child under the given parent node.
@item @code{node: string} (optional)
the name of the node that will be added.
@end table

@b{Note:}
this command is experimental, and its API is not stable. It
does not support all kinds of operations, all kinds of children, nor
all block drivers.

FIXME Removing children from a quorum node means introducing gaps in the
child indices. This cannot be represented in the 'children' list of
BlockdevOptionsQuorum, as returned by .bdrv_refresh_filename().

Warning: The data in a new quorum child MUST be consistent with that of
the rest of the array.

@b{Since:}
2.7

@b{Example:}
@example
1. Add a new node to a quorum
-> @{ "execute": "blockdev-add",
     "arguments": @{
         "driver": "raw",
         "node-name": "new_node",
         "file": @{ "driver": "file",
                   "filename": "test.raw" @} @} @}
<- @{ "return": @{@} @}
-> @{ "execute": "x-blockdev-change",
     "arguments": @{ "parent": "disk1",
                    "node": "new_node" @} @}
<- @{ "return": @{@} @}

2. Delete a quorum's node
-> @{ "execute": "x-blockdev-change",
     "arguments": @{ "parent": "disk1",
                    "child": "children.1" @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftypefn Command {} x-blockdev-set-iothread

Move @code{node} and its children into the @code{iothread}.  If @code{iothread} is null then
move @code{node} and its children into the main loop.

The node must not be attached to a BlockBackend.

@b{Arguments:}
@table @asis
@item @code{node-name: string}
the name of the block driver node
@item @code{iothread: StrOrNull}
the name of the IOThread object or null for the main loop
@item @code{force: boolean} (optional)
true if the node and its children should be moved when a BlockBackend
is already attached
@end table

@b{Note:}
this command is experimental and intended for test cases that need
control over IOThreads only.

@b{Since:}
2.12

@b{Example:}
@example
1. Move a node into an IOThread
-> @{ "execute": "x-blockdev-set-iothread",
     "arguments": @{ "node-name": "disk1",
                    "iothread": "iothread0" @} @}
<- @{ "return": @{@} @}

2. Move a node into the main loop
-> @{ "execute": "x-blockdev-set-iothread",
     "arguments": @{ "node-name": "disk1",
                    "iothread": null @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftp {Object} NbdServerOptions



@b{Members:}
@table @asis
@item @code{addr: SocketAddress}
Address on which to listen.
@item @code{tls-creds: string} (optional)
ID of the TLS credentials object (since 2.6).
@item @code{tls-authz: string} (optional)
ID of the QAuthZ authorization object used to validate
the client's x509 distinguished name. This object is
is only resolved at time of use, so can be deleted and
recreated on the fly while the NBD server is active.
If missing, it will default to denying access (since 4.0).
@end table
Keep this type consistent with the nbd-server-start arguments. The only
intended difference is using SocketAddress instead of SocketAddressLegacy.

@b{Since:}
4.2

@end deftp



@deftypefn Command {} nbd-server-start

Start an NBD server listening on the given host and port.  Block
devices can then be exported using @code{nbd-server-add}.  The NBD
server will present them as named exports; for example, another
QEMU instance could refer to them as "nbd:HOST:PORT:exportname=NAME".

@b{Arguments:}
@table @asis
@item @code{addr: SocketAddressLegacy}
Address on which to listen.
@item @code{tls-creds: string} (optional)
ID of the TLS credentials object (since 2.6).
@item @code{tls-authz: string} (optional)
ID of the QAuthZ authorization object used to validate
the client's x509 distinguished name. This object is
is only resolved at time of use, so can be deleted and
recreated on the fly while the NBD server is active.
If missing, it will default to denying access (since 4.0).
@end table

@b{Returns:}
error if the server is already running.

Keep this type consistent with the NbdServerOptions type. The only intended
difference is using SocketAddressLegacy instead of SocketAddress.

@b{Since:}
1.3.0

@end deftypefn



@deftp {Object} BlockExportNbd

An NBD block export.

@b{Members:}
@table @asis
@item @code{device: string}
The device name or node name of the node to be exported
@item @code{name: string} (optional)
Export name. If unspecified, the @code{device} parameter is used as the
export name. (Since 2.12)
@item @code{description: string} (optional)
Free-form description of the export, up to 4096 bytes.
(Since 5.0)
@item @code{writable: boolean} (optional)
Whether clients should be able to write to the device via the
NBD connection (default false).
@item @code{bitmap: string} (optional)
Also export the dirty bitmap reachable from @code{device}, so the
NBD client can use NBD_OPT_SET_META_CONTEXT with
"qemu:dirty-bitmap:NAME" to inspect the bitmap. (since 4.0)
@end table

@b{Since:}
5.0

@end deftp



@deftypefn Command {} nbd-server-add

Export a block node to QEMU's embedded NBD server.

@b{Arguments:} the members of @code{BlockExportNbd}

@b{Returns:}
error if the server is not running, or export with the same name
already exists.

@b{Since:}
1.3.0

@end deftypefn



@deftp {Enum} NbdServerRemoveMode

Mode for removing an NBD export.

@b{Values:}
@table @asis
@item @code{safe}
Remove export if there are no existing connections, fail otherwise.
@item @code{hard}
Drop all connections immediately and remove export.
@end table
Potential additional modes to be added in the future:

hide: Just hide export from new clients, leave existing connections as is.
Remove export after all clients are disconnected.

soft: Hide export from new clients, answer with ESHUTDOWN for all further
requests from existing clients.

@b{Since:}
2.12

@end deftp



@deftypefn Command {} nbd-server-remove

Remove NBD export by name.

@b{Arguments:}
@table @asis
@item @code{name: string}
Export name.
@item @code{mode: NbdServerRemoveMode} (optional)
Mode of command operation. See @code{NbdServerRemoveMode} description.
Default is 'safe'.
@end table

@b{Returns:}
error if
@itemize @minus
@item
the server is not running
@item
export is not found
@item
mode is 'safe' and there are existing connections
@end itemize


@b{Since:}
2.12

@end deftypefn



@deftypefn Command {} nbd-server-stop

Stop QEMU's embedded NBD server, and unregister all devices previously
added via @code{nbd-server-add}.

@b{Since:}
1.3.0

@end deftypefn



@deftp {Enum} BlockExportType

An enumeration of block export types

@b{Values:}
@table @asis
@item @code{nbd}
NBD export
@end table

@b{Since:}
4.2

@end deftp



@deftp {Object} BlockExport

Describes a block export, i.e. how single node should be exported on an
external interface.

@b{Members:}
@table @asis
@item @code{type: BlockExportType}
Not documented
@item The members of @code{BlockExportNbd} when @code{type} is @t{"nbd"}
@end table

@b{Since:}
4.2

@end deftp



@deftp {Enum} QuorumOpType

An enumeration of the quorum operation types

@b{Values:}
@table @asis
@item @code{read}
read operation
@item @code{write}
write operation
@item @code{flush}
flush operation
@end table

@b{Since:}
2.6

@end deftp



@deftypefn Event {} QUORUM_FAILURE

Emitted by the Quorum block driver if it fails to establish a quorum

@b{Arguments:}
@table @asis
@item @code{reference: string}
device name if defined else node name
@item @code{sector-num: int}
number of the first sector of the failed read operation
@item @code{sectors-count: int}
failed read operation sector count
@end table

@b{Note:}
This event is rate-limited.

@b{Since:}
2.0

@b{Example:}
@example
<- @{ "event": "QUORUM_FAILURE",
     "data": @{ "reference": "usr1", "sector-num": 345435, "sectors-count": 5 @},
     "timestamp": @{ "seconds": 1344522075, "microseconds": 745528 @} @}
@end example

@end deftypefn



@deftypefn Event {} QUORUM_REPORT_BAD

Emitted to report a corruption of a Quorum file

@b{Arguments:}
@table @asis
@item @code{type: QuorumOpType}
quorum operation type (Since 2.6)
@item @code{error: string} (optional)
error message. Only present on failure. This field
contains a human-readable error message. There are no semantics other
than that the block layer reported an error and clients should not
try to interpret the error string.
@item @code{node-name: string}
the graph node name of the block driver state
@item @code{sector-num: int}
number of the first sector of the failed read operation
@item @code{sectors-count: int}
failed read operation sector count
@end table

@b{Note:}
This event is rate-limited.

@b{Since:}
2.0

@b{Example:}
@example
1. Read operation

@{ "event": "QUORUM_REPORT_BAD",
     "data": @{ "node-name": "node0", "sector-num": 345435, "sectors-count": 5,
               "type": "read" @},
     "timestamp": @{ "seconds": 1344522075, "microseconds": 745528 @} @}

2. Flush operation

@{ "event": "QUORUM_REPORT_BAD",
     "data": @{ "node-name": "node0", "sector-num": 0, "sectors-count": 2097120,
               "type": "flush", "error": "Broken pipe" @},
     "timestamp": @{ "seconds": 1456406829, "microseconds": 291763 @} @}
@end example

@end deftypefn



@deftp {Object} BlockdevSnapshotInternal



@b{Members:}
@table @asis
@item @code{device: string}
the device name or node-name of a root node to generate the snapshot
from
@item @code{name: string}
the name of the internal snapshot to be created
@end table

@b{Notes:}
In transaction, if @code{name} is empty, or any snapshot matching @code{name}
exists, the operation will fail. Only some image formats support it,
for example, qcow2, rbd, and sheepdog.

@b{Since:}
1.7

@end deftp



@deftypefn Command {} blockdev-snapshot-internal-sync

Synchronously take an internal snapshot of a block device, when the
format of the image used supports it. If the name is an empty
string, or a snapshot with name already exists, the operation will
fail.

For the arguments, see the documentation of BlockdevSnapshotInternal.

@b{Returns:}
@itemize @minus
@item
nothing on success
@item
If @code{device} is not a valid block device, GenericError
@item
If any snapshot matching @code{name} exists, or @code{name} is empty,
GenericError
@item
If the format of the image used does not support it,
BlockFormatFeatureNotSupported
@end itemize


@b{Since:}
1.7

@b{Example:}
@example
-> @{ "execute": "blockdev-snapshot-internal-sync",
     "arguments": @{ "device": "ide-hd0",
                    "name": "snapshot0" @}
   @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftypefn Command {} blockdev-snapshot-delete-internal-sync

Synchronously delete an internal snapshot of a block device, when the format
of the image used support it. The snapshot is identified by name or id or
both. One of the name or id is required. Return SnapshotInfo for the
successfully deleted snapshot.

@b{Arguments:}
@table @asis
@item @code{device: string}
the device name or node-name of a root node to delete the snapshot
from
@item @code{id: string} (optional)
optional the snapshot's ID to be deleted
@item @code{name: string} (optional)
optional the snapshot's name to be deleted
@end table

@b{Returns:}
@itemize @minus
@item
SnapshotInfo on success
@item
If @code{device} is not a valid block device, GenericError
@item
If snapshot not found, GenericError
@item
If the format of the image used does not support it,
BlockFormatFeatureNotSupported
@item
If @code{id} and @code{name} are both not specified, GenericError
@end itemize


@b{Since:}
1.7

@b{Example:}
@example
-> @{ "execute": "blockdev-snapshot-delete-internal-sync",
     "arguments": @{ "device": "ide-hd0",
                    "name": "snapshot0" @}
   @}
<- @{ "return": @{
                   "id": "1",
                   "name": "snapshot0",
                   "vm-state-size": 0,
                   "date-sec": 1000012,
                   "date-nsec": 10,
                   "vm-clock-sec": 100,
                   "vm-clock-nsec": 20
     @}
   @}
@end example

@end deftypefn


@section Character devices


@deftp {Object} ChardevInfo

Information about a character device.

@b{Members:}
@table @asis
@item @code{label: string}
the label of the character device
@item @code{filename: string}
the filename of the character device
@item @code{frontend-open: boolean}
shows whether the frontend device attached to this backend
(eg. with the chardev=... option) is in open or closed state
(since 2.1)
@end table

@b{Notes:}
@code{filename} is encoded using the QEMU command line character device
encoding.  See the QEMU man page for details.

@b{Since:}
0.14.0

@end deftp



@deftypefn Command {} query-chardev

Returns information about current character devices.

@b{Returns:}
a list of @code{ChardevInfo}

@b{Since:}
0.14.0

@b{Example:}
@example
-> @{ "execute": "query-chardev" @}
<- @{
      "return": [
         @{
            "label": "charchannel0",
            "filename": "unix:/var/lib/libvirt/qemu/seabios.rhel6.agent,server",
            "frontend-open": false
         @},
         @{
            "label": "charmonitor",
            "filename": "unix:/var/lib/libvirt/qemu/seabios.rhel6.monitor,server",
            "frontend-open": true
         @},
         @{
            "label": "charserial0",
            "filename": "pty:/dev/pts/2",
            "frontend-open": true
         @}
      ]
   @}
@end example

@end deftypefn



@deftp {Object} ChardevBackendInfo

Information about a character device backend

@b{Members:}
@table @asis
@item @code{name: string}
The backend name
@end table

@b{Since:}
2.0

@end deftp



@deftypefn Command {} query-chardev-backends

Returns information about character device backends.

@b{Returns:}
a list of @code{ChardevBackendInfo}

@b{Since:}
2.0

@b{Example:}
@example
-> @{ "execute": "query-chardev-backends" @}
<- @{
      "return":[
         @{
            "name":"udp"
         @},
         @{
            "name":"tcp"
         @},
         @{
            "name":"unix"
         @},
         @{
            "name":"spiceport"
         @}
      ]
   @}
@end example

@end deftypefn



@deftp {Enum} DataFormat

An enumeration of data format.

@b{Values:}
@table @asis
@item @code{utf8}
Data is a UTF-8 string (RFC 3629)
@item @code{base64}
Data is Base64 encoded binary (RFC 3548)
@end table

@b{Since:}
1.4

@end deftp



@deftypefn Command {} ringbuf-write

Write to a ring buffer character device.

@b{Arguments:}
@table @asis
@item @code{device: string}
the ring buffer character device name
@item @code{data: string}
data to write
@item @code{format: DataFormat} (optional)
data encoding (default 'utf8').

@itemize @minus
@item
base64: data must be base64 encoded text.  Its binary
decoding gets written.
@item
utf8: data's UTF-8 encoding is written
@item
data itself is always Unicode regardless of format, like
any other string.
@end itemize

@end table

@b{Returns:}
Nothing on success

@b{Since:}
1.4

@b{Example:}
@example
-> @{ "execute": "ringbuf-write",
     "arguments": @{ "device": "foo",
                    "data": "abcdefgh",
                    "format": "utf8" @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftypefn Command {} ringbuf-read

Read from a ring buffer character device.

@b{Arguments:}
@table @asis
@item @code{device: string}
the ring buffer character device name
@item @code{size: int}
how many bytes to read at most
@item @code{format: DataFormat} (optional)
data encoding (default 'utf8').

@itemize @minus
@item
base64: the data read is returned in base64 encoding.
@item
utf8: the data read is interpreted as UTF-8.
Bug: can screw up when the buffer contains invalid UTF-8
sequences, NUL characters, after the ring buffer lost
data, and when reading stops because the size limit is
reached.
@item
The return value is always Unicode regardless of format,
like any other string.
@end itemize

@end table

@b{Returns:}
data read from the device

@b{Since:}
1.4

@b{Example:}
@example
-> @{ "execute": "ringbuf-read",
     "arguments": @{ "device": "foo",
                    "size": 1000,
                    "format": "utf8" @} @}
<- @{ "return": "abcdefgh" @}
@end example

@end deftypefn



@deftp {Object} ChardevCommon

Configuration shared across all chardev backends

@b{Members:}
@table @asis
@item @code{logfile: string} (optional)
The name of a logfile to save output
@item @code{logappend: boolean} (optional)
true to append instead of truncate
(default to false to truncate)
@end table

@b{Since:}
2.6

@end deftp



@deftp {Object} ChardevFile

Configuration info for file chardevs.

@b{Members:}
@table @asis
@item @code{in: string} (optional)
The name of the input file
@item @code{out: string}
The name of the output file
@item @code{append: boolean} (optional)
Open the file in append mode (default false to
truncate) (Since 2.6)
@item The members of @code{ChardevCommon}
@end table

@b{Since:}
1.4

@end deftp



@deftp {Object} ChardevHostdev

Configuration info for device and pipe chardevs.

@b{Members:}
@table @asis
@item @code{device: string}
The name of the special file for the device,
i.e. /dev/ttyS0 on Unix or COM1: on Windows
@item The members of @code{ChardevCommon}
@end table

@b{Since:}
1.4

@end deftp



@deftp {Object} ChardevSocket

Configuration info for (stream) socket chardevs.

@b{Members:}
@table @asis
@item @code{addr: SocketAddressLegacy}
socket address to listen on (server=true)
or connect to (server=false)
@item @code{tls-creds: string} (optional)
the ID of the TLS credentials object (since 2.6)
@item @code{tls-authz: string} (optional)
the ID of the QAuthZ authorization object against which
the client's x509 distinguished name will be validated. This
object is only resolved at time of use, so can be deleted
and recreated on the fly while the chardev server is active.
If missing, it will default to denying access (since 4.0)
@item @code{server: boolean} (optional)
create server socket (default: true)
@item @code{wait: boolean} (optional)
wait for incoming connection on server
sockets (default: false).
Silently ignored with server: false.  This use is deprecated.
@item @code{nodelay: boolean} (optional)
set TCP_NODELAY socket option (default: false)
@item @code{telnet: boolean} (optional)
enable telnet protocol on server
sockets (default: false)
@item @code{tn3270: boolean} (optional)
enable tn3270 protocol on server
sockets (default: false) (Since: 2.10)
@item @code{websocket: boolean} (optional)
enable websocket protocol on server
sockets (default: false) (Since: 3.1)
@item @code{reconnect: int} (optional)
For a client socket, if a socket is disconnected,
then attempt a reconnect after the given number of seconds.
Setting this to zero disables this function. (default: 0)
(Since: 2.2)
@item The members of @code{ChardevCommon}
@end table

@b{Since:}
1.4

@end deftp



@deftp {Object} ChardevUdp

Configuration info for datagram socket chardevs.

@b{Members:}
@table @asis
@item @code{remote: SocketAddressLegacy}
remote address
@item @code{local: SocketAddressLegacy} (optional)
local address
@item The members of @code{ChardevCommon}
@end table

@b{Since:}
1.5

@end deftp



@deftp {Object} ChardevMux

Configuration info for mux chardevs.

@b{Members:}
@table @asis
@item @code{chardev: string}
name of the base chardev.
@item The members of @code{ChardevCommon}
@end table

@b{Since:}
1.5

@end deftp



@deftp {Object} ChardevStdio

Configuration info for stdio chardevs.

@b{Members:}
@table @asis
@item @code{signal: boolean} (optional)
Allow signals (such as SIGINT triggered by ^C)
be delivered to qemu.  Default: true in -nographic mode,
false otherwise.
@item The members of @code{ChardevCommon}
@end table

@b{Since:}
1.5

@end deftp



@deftp {Object} ChardevSpiceChannel

Configuration info for spice vm channel chardevs.

@b{Members:}
@table @asis
@item @code{type: string}
kind of channel (for example vdagent).
@item The members of @code{ChardevCommon}
@end table

@b{Since:}
1.5

@b{If:} @code{defined(CONFIG_SPICE)}
@end deftp



@deftp {Object} ChardevSpicePort

Configuration info for spice port chardevs.

@b{Members:}
@table @asis
@item @code{fqdn: string}
name of the channel (see docs/spice-port-fqdn.txt)
@item The members of @code{ChardevCommon}
@end table

@b{Since:}
1.5

@b{If:} @code{defined(CONFIG_SPICE)}
@end deftp



@deftp {Object} ChardevVC

Configuration info for virtual console chardevs.

@b{Members:}
@table @asis
@item @code{width: int} (optional)
console width,  in pixels
@item @code{height: int} (optional)
console height, in pixels
@item @code{cols: int} (optional)
console width,  in chars
@item @code{rows: int} (optional)
console height, in chars
@item The members of @code{ChardevCommon}
@end table

@b{Since:}
1.5

@end deftp



@deftp {Object} ChardevRingbuf

Configuration info for ring buffer chardevs.

@b{Members:}
@table @asis
@item @code{size: int} (optional)
ring buffer size, must be power of two, default is 65536
@item The members of @code{ChardevCommon}
@end table

@b{Since:}
1.5

@end deftp



@deftp {Object} ChardevBackend

Configuration info for the new chardev backend.

@b{Members:}
@table @asis
@item @code{type}
One of @t{"file"}, @t{"serial"}, @t{"parallel"}, @t{"pipe"}, @t{"socket"}, @t{"udp"}, @t{"pty"}, @t{"null"}, @t{"mux"}, @t{"msmouse"}, @t{"wctablet"}, @t{"braille"}, @t{"testdev"}, @t{"stdio"}, @t{"console"}, @t{"spicevmc"}, @t{"spiceport"}, @t{"vc"}, @t{"ringbuf"}, @t{"memory"}
@item @code{data: ChardevFile} when @code{type} is @t{"file"}
@item @code{data: ChardevHostdev} when @code{type} is @t{"serial"}
@item @code{data: ChardevHostdev} when @code{type} is @t{"parallel"}
@item @code{data: ChardevHostdev} when @code{type} is @t{"pipe"}
@item @code{data: ChardevSocket} when @code{type} is @t{"socket"}
@item @code{data: ChardevUdp} when @code{type} is @t{"udp"}
@item @code{data: ChardevCommon} when @code{type} is @t{"pty"}
@item @code{data: ChardevCommon} when @code{type} is @t{"null"}
@item @code{data: ChardevMux} when @code{type} is @t{"mux"}
@item @code{data: ChardevCommon} when @code{type} is @t{"msmouse"}
@item @code{data: ChardevCommon} when @code{type} is @t{"wctablet"}
@item @code{data: ChardevCommon} when @code{type} is @t{"braille"}
@item @code{data: ChardevCommon} when @code{type} is @t{"testdev"}
@item @code{data: ChardevStdio} when @code{type} is @t{"stdio"}
@item @code{data: ChardevCommon} when @code{type} is @t{"console"}
@item @code{data: ChardevSpiceChannel} when @code{type} is @t{"spicevmc"} (@b{If:} @code{defined(CONFIG_SPICE)})
@item @code{data: ChardevSpicePort} when @code{type} is @t{"spiceport"} (@b{If:} @code{defined(CONFIG_SPICE)})
@item @code{data: ChardevVC} when @code{type} is @t{"vc"}
@item @code{data: ChardevRingbuf} when @code{type} is @t{"ringbuf"}
@item @code{data: ChardevRingbuf} when @code{type} is @t{"memory"}
@end table

@b{Since:}
1.4 (testdev since 2.2, wctablet since 2.9)

@end deftp



@deftp {Object} ChardevReturn

Return info about the chardev backend just created.

@b{Members:}
@table @asis
@item @code{pty: string} (optional)
name of the slave pseudoterminal device, present if
and only if a chardev of type 'pty' was created
@end table

@b{Since:}
1.4

@end deftp



@deftypefn Command {} chardev-add

Add a character device backend

@b{Arguments:}
@table @asis
@item @code{id: string}
the chardev's ID, must be unique
@item @code{backend: ChardevBackend}
backend type and parameters
@end table

@b{Returns:}
ChardevReturn.

@b{Since:}
1.4

@b{Example:}
@example
-> @{ "execute" : "chardev-add",
     "arguments" : @{ "id" : "foo",
                     "backend" : @{ "type" : "null", "data" : @{@} @} @} @}
<- @{ "return": @{@} @}

-> @{ "execute" : "chardev-add",
     "arguments" : @{ "id" : "bar",
                     "backend" : @{ "type" : "file",
                                   "data" : @{ "out" : "/tmp/bar.log" @} @} @} @}
<- @{ "return": @{@} @}

-> @{ "execute" : "chardev-add",
     "arguments" : @{ "id" : "baz",
                     "backend" : @{ "type" : "pty", "data" : @{@} @} @} @}
<- @{ "return": @{ "pty" : "/dev/pty/42" @} @}
@end example

@end deftypefn



@deftypefn Command {} chardev-change

Change a character device backend

@b{Arguments:}
@table @asis
@item @code{id: string}
the chardev's ID, must exist
@item @code{backend: ChardevBackend}
new backend type and parameters
@end table

@b{Returns:}
ChardevReturn.

@b{Since:}
2.10

@b{Example:}
@example
-> @{ "execute" : "chardev-change",
     "arguments" : @{ "id" : "baz",
                     "backend" : @{ "type" : "pty", "data" : @{@} @} @} @}
<- @{ "return": @{ "pty" : "/dev/pty/42" @} @}

-> @{"execute" : "chardev-change",
    "arguments" : @{
        "id" : "charchannel2",
        "backend" : @{
            "type" : "socket",
            "data" : @{
                "addr" : @{
                    "type" : "unix" ,
                    "data" : @{
                        "path" : "/tmp/charchannel2.socket"
                    @}
                 @},
                 "server" : true,
                 "wait" : false @}@}@}@}
<- @{"return": @{@}@}
@end example

@end deftypefn



@deftypefn Command {} chardev-remove

Remove a character device backend

@b{Arguments:}
@table @asis
@item @code{id: string}
the chardev's ID, must exist and not be in use
@end table

@b{Returns:}
Nothing on success

@b{Since:}
1.4

@b{Example:}
@example
-> @{ "execute": "chardev-remove", "arguments": @{ "id" : "foo" @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftypefn Command {} chardev-send-break

Send a break to a character device

@b{Arguments:}
@table @asis
@item @code{id: string}
the chardev's ID, must exist
@end table

@b{Returns:}
Nothing on success

@b{Since:}
2.10

@b{Example:}
@example
-> @{ "execute": "chardev-send-break", "arguments": @{ "id" : "foo" @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftypefn Event {} VSERPORT_CHANGE

Emitted when the guest opens or closes a virtio-serial port.

@b{Arguments:}
@table @asis
@item @code{id: string}
device identifier of the virtio-serial port
@item @code{open: boolean}
true if the guest has opened the virtio-serial port
@end table

@b{Since:}
2.1

@b{Example:}
@example
<- @{ "event": "VSERPORT_CHANGE",
     "data": @{ "id": "channel0", "open": true @},
     "timestamp": @{ "seconds": 1401385907, "microseconds": 422329 @} @}
@end example

@end deftypefn


@section QMP monitor control


@deftypefn Command {} qmp_capabilities

Enable QMP capabilities.

Arguments:

@b{Arguments:}
@table @asis
@item @code{enable: array of QMPCapability} (optional)
An optional list of QMPCapability values to enable.  The
client must not enable any capability that is not
mentioned in the QMP greeting message.  If the field is not
provided, it means no QMP capabilities will be enabled.
(since 2.12)
@end table

@b{Example:}
@example
-> @{ "execute": "qmp_capabilities",
     "arguments": @{ "enable": [ "oob" ] @} @}
<- @{ "return": @{@} @}
@end example

@b{Notes:}
This command is valid exactly when first connecting: it must be
issued before any other command will be accepted, and will fail once the
monitor is accepting other commands. (see qemu docs/interop/qmp-spec.txt)

The QMP client needs to explicitly enable QMP capabilities, otherwise
all the QMP capabilities will be turned off by default.

@b{Since:}
0.13

@end deftypefn



@deftp {Enum} QMPCapability

Enumeration of capabilities to be advertised during initial client
connection, used for agreeing on particular QMP extension behaviors.

@b{Values:}
@table @asis
@item @code{oob}
QMP ability to support out-of-band requests.
(Please refer to qmp-spec.txt for more information on OOB)
@end table

@b{Since:}
2.12

@end deftp



@deftp {Object} VersionTriple

A three-part version number.

@b{Members:}
@table @asis
@item @code{major: int}
The major version number.
@item @code{minor: int}
The minor version number.
@item @code{micro: int}
The micro version number.
@end table

@b{Since:}
2.4

@end deftp



@deftp {Object} VersionInfo

A description of QEMU's version.

@b{Members:}
@table @asis
@item @code{qemu: VersionTriple}
The version of QEMU.  By current convention, a micro
version of 50 signifies a development branch.  A micro version
greater than or equal to 90 signifies a release candidate for
the next minor version.  A micro version of less than 50
signifies a stable release.
@item @code{package: string}
QEMU will always set this field to an empty string.  Downstream
versions of QEMU should set this to a non-empty string.  The
exact format depends on the downstream however it highly
recommended that a unique name is used.
@end table

@b{Since:}
0.14.0

@end deftp



@deftypefn Command {} query-version

Returns the current version of QEMU.

@b{Returns:}
A @code{VersionInfo} object describing the current version of QEMU.

@b{Since:}
0.14.0

@b{Example:}
@example
-> @{ "execute": "query-version" @}
<- @{
      "return":@{
         "qemu":@{
            "major":0,
            "minor":11,
            "micro":5
         @},
         "package":""
      @}
   @}
@end example

@end deftypefn



@deftp {Object} CommandInfo

Information about a QMP command

@b{Members:}
@table @asis
@item @code{name: string}
The command name
@end table

@b{Since:}
0.14.0

@end deftp



@deftypefn Command {} query-commands

Return a list of supported QMP commands by this server

@b{Returns:}
A list of @code{CommandInfo} for all supported commands

@b{Since:}
0.14.0

@b{Example:}
@example
-> @{ "execute": "query-commands" @}
<- @{
     "return":[
        @{
           "name":"query-balloon"
        @},
        @{
           "name":"system_powerdown"
        @}
     ]
   @}
@end example

@b{Note:}
This example has been shortened as the real response is too long.

@end deftypefn



@deftp {Object} EventInfo

Information about a QMP event

@b{Members:}
@table @asis
@item @code{name: string}
The event name
@end table

@b{Since:}
1.2.0

@end deftp



@deftypefn Command {} query-events

Return information on QMP events.

@b{Features:}
@table @asis
@item @code{deprecated}
This command is deprecated, because its output doesn't
reflect compile-time configuration.  Use 'query-qmp-schema'
instead.
@end table

@b{Returns:}
A list of @code{EventInfo}.

@b{Since:}
1.2.0

@b{Example:}
@example
-> @{ "execute": "query-events" @}
<- @{
     "return": [
         @{
            "name":"SHUTDOWN"
         @},
         @{
            "name":"RESET"
         @}
      ]
   @}
@end example

@b{Note:}
This example has been shortened as the real response is too long.

@end deftypefn



@deftypefn Command {} quit

This command will cause the QEMU process to exit gracefully.  While every
attempt is made to send the QMP response before terminating, this is not
guaranteed.  When using this interface, a premature EOF would not be
unexpected.

@b{Since:}
0.14.0

@b{Example:}
@example
-> @{ "execute": "quit" @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftp {Enum} MonitorMode

An enumeration of monitor modes.

@b{Values:}
@table @asis
@item @code{readline}
HMP monitor (human-oriented command line interface)
@item @code{control}
QMP monitor (JSON-based machine interface)
@end table

@b{Since:}
5.0

@end deftp



@deftp {Object} MonitorOptions

Options to be used for adding a new monitor.

@b{Members:}
@table @asis
@item @code{id: string} (optional)
Name of the monitor
@item @code{mode: MonitorMode} (optional)
Selects the monitor mode (default: readline in the system
emulator, control in qemu-storage-daemon)
@item @code{pretty: boolean} (optional)
Enables pretty printing (QMP only)
@item @code{chardev: string}
Name of a character device to expose the monitor on
@end table

@b{Since:}
5.0

@end deftp


@section QMP introspection


@deftypefn Command {} query-qmp-schema

Command query-qmp-schema exposes the QMP wire ABI as an array of
SchemaInfo.  This lets QMP clients figure out what commands and
events are available in this QEMU, and their parameters and results.

However, the SchemaInfo can't reflect all the rules and restrictions
that apply to QMP.  It's interface introspection (figuring out
what's there), not interface specification.  The specification is in
the QAPI schema.

Furthermore, while we strive to keep the QMP wire format
backwards-compatible across qemu versions, the introspection output
is not guaranteed to have the same stability.  For example, one
version of qemu may list an object member as an optional
non-variant, while another lists the same member only through the
object's variants; or the type of a member may change from a generic
string into a specific enum or from one specific type into an
alternate that includes the original type alongside something else.

@b{Returns:}
array of @code{SchemaInfo}, where each element describes an
entity in the ABI: command, event, type, ...

The order of the various SchemaInfo is unspecified; however, all
names are guaranteed to be unique (no name will be duplicated with
different meta-types).

@b{Note:}
the QAPI schema is also used to help define @strong{internal}
interfaces, by defining QAPI types.  These are not part of the QMP
wire ABI, and therefore not returned by this command.

@b{Since:}
2.5

@end deftypefn



@deftp {Enum} SchemaMetaType

This is a @code{SchemaInfo}'s meta type, i.e. the kind of entity it
describes.

@b{Values:}
@table @asis
@item @code{builtin}
a predefined type such as 'int' or 'bool'.
@item @code{enum}
an enumeration type
@item @code{array}
an array type
@item @code{object}
an object type (struct or union)
@item @code{alternate}
an alternate type
@item @code{command}
a QMP command
@item @code{event}
a QMP event
@end table

@b{Since:}
2.5

@end deftp



@deftp {Object} SchemaInfo



@b{Members:}
@table @asis
@item @code{name: string}
the entity's name, inherited from @code{base}.
The SchemaInfo is always referenced by this name.
Commands and events have the name defined in the QAPI schema.
Unlike command and event names, type names are not part of
the wire ABI.  Consequently, type names are meaningless
strings here, although they are still guaranteed unique
regardless of @code{meta-type}.
@item @code{meta-type: SchemaMetaType}
the entity's meta type, inherited from @code{base}.
@item @code{features: array of string} (optional)
names of features associated with the entity, in no
particular order.
(since 4.1 for object types, 4.2 for commands, 5.0 for
the rest)
@item The members of @code{SchemaInfoBuiltin} when @code{meta-type} is @t{"builtin"}
@item The members of @code{SchemaInfoEnum} when @code{meta-type} is @t{"enum"}
@item The members of @code{SchemaInfoArray} when @code{meta-type} is @t{"array"}
@item The members of @code{SchemaInfoObject} when @code{meta-type} is @t{"object"}
@item The members of @code{SchemaInfoAlternate} when @code{meta-type} is @t{"alternate"}
@item The members of @code{SchemaInfoCommand} when @code{meta-type} is @t{"command"}
@item The members of @code{SchemaInfoEvent} when @code{meta-type} is @t{"event"}
@end table
Additional members depend on the value of @code{meta-type}.

@b{Since:}
2.5

@end deftp



@deftp {Object} SchemaInfoBuiltin

Additional SchemaInfo members for meta-type 'builtin'.

@b{Members:}
@table @asis
@item @code{json-type: JSONType}
the JSON type used for this type on the wire.
@end table

@b{Since:}
2.5

@end deftp



@deftp {Enum} JSONType

The four primitive and two structured types according to RFC 8259
section 1, plus 'int' (split off 'number'), plus the obvious top
type 'value'.

@b{Values:}
@table @asis
@item @code{string}
Not documented
@item @code{number}
Not documented
@item @code{int}
Not documented
@item @code{boolean}
Not documented
@item @code{null}
Not documented
@item @code{object}
Not documented
@item @code{array}
Not documented
@item @code{value}
Not documented
@end table

@b{Since:}
2.5

@end deftp



@deftp {Object} SchemaInfoEnum

Additional SchemaInfo members for meta-type 'enum'.

@b{Members:}
@table @asis
@item @code{values: array of string}
the enumeration type's values, in no particular order.
@end table
Values of this type are JSON string on the wire.

@b{Since:}
2.5

@end deftp



@deftp {Object} SchemaInfoArray

Additional SchemaInfo members for meta-type 'array'.

@b{Members:}
@table @asis
@item @code{element-type: string}
the array type's element type.
@end table
Values of this type are JSON array on the wire.

@b{Since:}
2.5

@end deftp



@deftp {Object} SchemaInfoObject

Additional SchemaInfo members for meta-type 'object'.

@b{Members:}
@table @asis
@item @code{members: array of SchemaInfoObjectMember}
the object type's (non-variant) members, in no particular order.
@item @code{tag: string} (optional)
the name of the member serving as type tag.
An element of @code{members} with this name must exist.
@item @code{variants: array of SchemaInfoObjectVariant} (optional)
variant members, i.e. additional members that
depend on the type tag's value.  Present exactly when
@code{tag} is present.  The variants are in no particular order,
and may even differ from the order of the values of the
enum type of the @code{tag}.
@end table
Values of this type are JSON object on the wire.

@b{Since:}
2.5

@end deftp



@deftp {Object} SchemaInfoObjectMember

An object member.

@b{Members:}
@table @asis
@item @code{name: string}
the member's name, as defined in the QAPI schema.
@item @code{type: string}
the name of the member's type.
@item @code{default: value} (optional)
default when used as command parameter.
If absent, the parameter is mandatory.
If present, the value must be null.  The parameter is
optional, and behavior when it's missing is not specified
here.
Future extension: if present and non-null, the parameter
is optional, and defaults to this value.
@item @code{features: array of string} (optional)
names of features associated with the member, in no
particular order.  (since 5.0)
@end table

@b{Since:}
2.5

@end deftp



@deftp {Object} SchemaInfoObjectVariant

The variant members for a value of the type tag.

@b{Members:}
@table @asis
@item @code{case: string}
a value of the type tag.
@item @code{type: string}
the name of the object type that provides the variant members
when the type tag has value @code{case}.
@end table

@b{Since:}
2.5

@end deftp



@deftp {Object} SchemaInfoAlternate

Additional SchemaInfo members for meta-type 'alternate'.

@b{Members:}
@table @asis
@item @code{members: array of SchemaInfoAlternateMember}
the alternate type's members, in no particular order.
The members' wire encoding is distinct, see
docs/devel/qapi-code-gen.txt section Alternate types.
@end table
On the wire, this can be any of the members.

@b{Since:}
2.5

@end deftp



@deftp {Object} SchemaInfoAlternateMember

An alternate member.

@b{Members:}
@table @asis
@item @code{type: string}
the name of the member's type.
@end table

@b{Since:}
2.5

@end deftp



@deftp {Object} SchemaInfoCommand

Additional SchemaInfo members for meta-type 'command'.

@b{Members:}
@table @asis
@item @code{arg-type: string}
the name of the object type that provides the command's
parameters.
@item @code{ret-type: string}
the name of the command's result type.
@item @code{allow-oob: boolean} (optional)
whether the command allows out-of-band execution,
defaults to false (Since: 2.12)
@end table

@b{TODO:}
@code{success-response} (currently irrelevant, because it's QGA, not QMP)

@b{Since:}
2.5

@end deftp



@deftp {Object} SchemaInfoEvent

Additional SchemaInfo members for meta-type 'event'.

@b{Members:}
@table @asis
@item @code{arg-type: string}
the name of the object type that provides the event's
parameters.
@end table

@b{Since:}
2.5

@end deftp


@section QEMU Object Model (QOM)


@deftp {Object} ObjectPropertyInfo



@b{Members:}
@table @asis
@item @code{name: string}
the name of the property
@item @code{type: string}
the type of the property.  This will typically come in one of four
forms:

1) A primitive type such as 'u8', 'u16', 'bool', 'str', or 'double'.
These types are mapped to the appropriate JSON type.

2) A child type in the form 'child<subtype>' where subtype is a qdev
device type name.  Child properties create the composition tree.

3) A link type in the form 'link<subtype>' where subtype is a qdev
device type name.  Link properties form the device model graph.
@item @code{description: string} (optional)
if specified, the description of the property.
@item @code{default-value: value} (optional)
the default value, if any (since 5.0)
@end table

@b{Since:}
1.2

@end deftp



@deftypefn Command {} qom-list

This command will list any properties of a object given a path in the object
model.

@b{Arguments:}
@table @asis
@item @code{path: string}
the path within the object model.  See @code{qom-get} for a description of
this parameter.
@end table

@b{Returns:}
a list of @code{ObjectPropertyInfo} that describe the properties of the
object.

@b{Since:}
1.2

@b{Example:}
@example
-> @{ "execute": "qom-list",
     "arguments": @{ "path": "/chardevs" @} @}
<- @{ "return": [ @{ "name": "type", "type": "string" @},
                 @{ "name": "parallel0", "type": "child<chardev-vc>" @},
                 @{ "name": "serial0", "type": "child<chardev-vc>" @},
                 @{ "name": "mon0", "type": "child<chardev-stdio>" @} ] @}
@end example

@end deftypefn



@deftypefn Command {} qom-get

This command will get a property from a object model path and return the
value.

@b{Arguments:}
@table @asis
@item @code{path: string}
The path within the object model.  There are two forms of supported
paths--absolute and partial paths.

Absolute paths are derived from the root object and can follow child<>
or link<> properties.  Since they can follow link<> properties, they
can be arbitrarily long.  Absolute paths look like absolute filenames
and are prefixed  with a leading slash.

Partial paths look like relative filenames.  They do not begin
with a prefix.  The matching rules for partial paths are subtle but
designed to make specifying objects easy.  At each level of the
composition tree, the partial path is matched as an absolute path.
The first match is not returned.  At least two matches are searched
for.  A successful result is only returned if only one match is
found.  If more than one match is found, a flag is return to
indicate that the match was ambiguous.
@item @code{property: string}
The property name to read
@end table

@b{Returns:}
The property value.  The type depends on the property
type. child<> and link<> properties are returned as #str
pathnames.  All integer property types (u8, u16, etc) are
returned as #int.

@b{Since:}
1.2

@b{Example:}
@example
1. Use absolute path

-> @{ "execute": "qom-get",
     "arguments": @{ "path": "/machine/unattached/device[0]",
                    "property": "hotplugged" @} @}
<- @{ "return": false @}

2. Use partial path

-> @{ "execute": "qom-get",
     "arguments": @{ "path": "unattached/sysbus",
                    "property": "type" @} @}
<- @{ "return": "System" @}
@end example

@end deftypefn



@deftypefn Command {} qom-set

This command will set a property from a object model path.

@b{Arguments:}
@table @asis
@item @code{path: string}
see @code{qom-get} for a description of this parameter
@item @code{property: string}
the property name to set
@item @code{value: value}
a value who's type is appropriate for the property type.  See @code{qom-get}
for a description of type mapping.
@end table

@b{Since:}
1.2

@b{Example:}
@example
-> @{ "execute": "qom-set",
     "arguments": @{ "path": "/machine",
                    "property": "graphics",
                    "value": false @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftp {Object} ObjectTypeInfo

This structure describes a search result from @code{qom-list-types}

@b{Members:}
@table @asis
@item @code{name: string}
the type name found in the search
@item @code{abstract: boolean} (optional)
the type is abstract and can't be directly instantiated.
Omitted if false. (since 2.10)
@item @code{parent: string} (optional)
Name of parent type, if any (since 2.10)
@end table

@b{Since:}
1.1

@end deftp



@deftypefn Command {} qom-list-types

This command will return a list of types given search parameters

@b{Arguments:}
@table @asis
@item @code{implements: string} (optional)
if specified, only return types that implement this type name
@item @code{abstract: boolean} (optional)
if true, include abstract types in the results
@end table

@b{Returns:}
a list of @code{ObjectTypeInfo} or an empty list if no results are found

@b{Since:}
1.1

@end deftypefn



@deftypefn Command {} qom-list-properties

List properties associated with a QOM object.

@b{Arguments:}
@table @asis
@item @code{typename: string}
the type name of an object
@end table

@b{Note:}
objects can create properties at runtime, for example to describe
links between different devices and/or objects. These properties
are not included in the output of this command.

@b{Returns:}
a list of ObjectPropertyInfo describing object properties

@b{Since:}
2.12

@end deftypefn



@deftypefn Command {} object-add

Create a QOM object.

@b{Arguments:}
@table @asis
@item @code{qom-type: string}
the class name for the object to be created
@item @code{id: string}
the name of the new object
@item @code{props: value} (optional)
a dictionary of properties to be passed to the backend. Deprecated
since 5.0, specify the properties on the top level instead. It is an
error to specify the same option both on the top level and in @code{props}.
@end table
Additional arguments depend on qom-type and are passed to the backend
unchanged.

@b{Returns:}
Nothing on success
Error if @code{qom-type} is not a valid class name

@b{Since:}
2.0

@b{Example:}
@example
-> @{ "execute": "object-add",
     "arguments": @{ "qom-type": "rng-random", "id": "rng1",
                    "filename": "/dev/hwrng" @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn



@deftypefn Command {} object-del

Remove a QOM object.

@b{Arguments:}
@table @asis
@item @code{id: string}
the name of the QOM object to remove
@end table

@b{Returns:}
Nothing on success
Error if @code{id} is not a valid id for a QOM object

@b{Since:}
2.0

@b{Example:}
@example
-> @{ "execute": "object-del", "arguments": @{ "id": "rng1" @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn


@section Transactions


@deftp {Object} Abort

This action can be used to test transaction failure.

@b{Since:}
1.6

@end deftp



@deftp {Enum} ActionCompletionMode

An enumeration of Transactional completion modes.

@b{Values:}
@table @asis
@item @code{individual}
Do not attempt to cancel any other Actions if any Actions fail
after the Transaction request succeeds. All Actions that
can complete successfully will do so without waiting on others.
This is the default.
@item @code{grouped}
If any Action fails after the Transaction succeeds, cancel all
Actions. Actions do not complete until all Actions are ready to
complete. May be rejected by Actions that do not support this
completion mode.
@end table

@b{Since:}
2.5

@end deftp



@deftp {Object} TransactionAction

A discriminated record of operations that can be performed with
@code{transaction}. Action @code{type} can be:

@itemize @minus
@item
@code{abort}: since 1.6
@item
@code{block-dirty-bitmap-add}: since 2.5
@item
@code{block-dirty-bitmap-remove}: since 4.2
@item
@code{block-dirty-bitmap-clear}: since 2.5
@item
@code{block-dirty-bitmap-enable}: since 4.0
@item
@code{block-dirty-bitmap-disable}: since 4.0
@item
@code{block-dirty-bitmap-merge}: since 4.0
@item
@code{blockdev-backup}: since 2.3
@item
@code{blockdev-snapshot}: since 2.5
@item
@code{blockdev-snapshot-internal-sync}: since 1.7
@item
@code{blockdev-snapshot-sync}: since 1.1
@item
@code{drive-backup}: since 1.6
@end itemize


@b{Members:}
@table @asis
@item @code{type}
One of @t{"abort"}, @t{"block-dirty-bitmap-add"}, @t{"block-dirty-bitmap-remove"}, @t{"block-dirty-bitmap-clear"}, @t{"block-dirty-bitmap-enable"}, @t{"block-dirty-bitmap-disable"}, @t{"block-dirty-bitmap-merge"}, @t{"blockdev-backup"}, @t{"blockdev-snapshot"}, @t{"blockdev-snapshot-internal-sync"}, @t{"blockdev-snapshot-sync"}, @t{"drive-backup"}
@item @code{data: Abort} when @code{type} is @t{"abort"}
@item @code{data: BlockDirtyBitmapAdd} when @code{type} is @t{"block-dirty-bitmap-add"}
@item @code{data: BlockDirtyBitmap} when @code{type} is @t{"block-dirty-bitmap-remove"}
@item @code{data: BlockDirtyBitmap} when @code{type} is @t{"block-dirty-bitmap-clear"}
@item @code{data: BlockDirtyBitmap} when @code{type} is @t{"block-dirty-bitmap-enable"}
@item @code{data: BlockDirtyBitmap} when @code{type} is @t{"block-dirty-bitmap-disable"}
@item @code{data: BlockDirtyBitmapMerge} when @code{type} is @t{"block-dirty-bitmap-merge"}
@item @code{data: BlockdevBackup} when @code{type} is @t{"blockdev-backup"}
@item @code{data: BlockdevSnapshot} when @code{type} is @t{"blockdev-snapshot"}
@item @code{data: BlockdevSnapshotInternal} when @code{type} is @t{"blockdev-snapshot-internal-sync"}
@item @code{data: BlockdevSnapshotSync} when @code{type} is @t{"blockdev-snapshot-sync"}
@item @code{data: DriveBackup} when @code{type} is @t{"drive-backup"}
@end table

@b{Since:}
1.1

@end deftp



@deftp {Object} TransactionProperties

Optional arguments to modify the behavior of a Transaction.

@b{Members:}
@table @asis
@item @code{completion-mode: ActionCompletionMode} (optional)
Controls how jobs launched asynchronously by
Actions will complete or fail as a group.
See @code{ActionCompletionMode} for details.
@end table

@b{Since:}
2.5

@end deftp



@deftypefn Command {} transaction

Executes a number of transactionable QMP commands atomically. If any
operation fails, then the entire set of actions will be abandoned and the
appropriate error returned.

For external snapshots, the dictionary contains the device, the file to use for
the new snapshot, and the format.  The default format, if not specified, is
qcow2.

Each new snapshot defaults to being created by QEMU (wiping any
contents if the file already exists), but it is also possible to reuse
an externally-created file.  In the latter case, you should ensure that
the new image file has the same contents as the current one; QEMU cannot
perform any meaningful check.  Typically this is achieved by using the
current image file as the backing file for the new image.

On failure, the original disks pre-snapshot attempt will be used.

For internal snapshots, the dictionary contains the device and the snapshot's
name.  If an internal snapshot matching name already exists, the request will
be rejected.  Only some image formats support it, for example, qcow2, rbd,
and sheepdog.

On failure, qemu will try delete the newly created internal snapshot in the
transaction.  When an I/O error occurs during deletion, the user needs to fix
it later with qemu-img or other command.

@b{Arguments:}
@table @asis
@item @code{actions: array of TransactionAction}
List of @code{TransactionAction};
information needed for the respective operations.
@item @code{properties: TransactionProperties} (optional)
structure of additional options to control the
execution of the transaction. See @code{TransactionProperties}
for additional detail.
@end table

@b{Returns:}
nothing on success

Errors depend on the operations of the transaction

@b{Note:}
The transaction aborts on the first failure.  Therefore, there will be
information on only one failed operation returned in an error condition, and
subsequent actions will not have been attempted.

@b{Since:}
1.1

@b{Example:}
@example
-> @{ "execute": "transaction",
     "arguments": @{ "actions": [
         @{ "type": "blockdev-snapshot-sync", "data" : @{ "device": "ide-hd0",
                                     "snapshot-file": "/some/place/my-image",
                                     "format": "qcow2" @} @},
         @{ "type": "blockdev-snapshot-sync", "data" : @{ "node-name": "myfile",
                                     "snapshot-file": "/some/place/my-image2",
                                     "snapshot-node-name": "node3432",
                                     "mode": "existing",
                                     "format": "qcow2" @} @},
         @{ "type": "blockdev-snapshot-sync", "data" : @{ "device": "ide-hd1",
                                     "snapshot-file": "/some/place/my-image2",
                                     "mode": "existing",
                                     "format": "qcow2" @} @},
         @{ "type": "blockdev-snapshot-internal-sync", "data" : @{
                                     "device": "ide-hd2",
                                     "name": "snapshot0" @} @} ] @} @}
<- @{ "return": @{@} @}
@end example

@end deftypefn

